
#include <stdmeta/tbas.hbas>

codegen u64 whygen = 0;

@mktemplate [
    doWhy
    [
        [__WHY__();]
        @global
        fn codegen __WHY__():
            __builtin_puts(MSG);
        end
    ][
        MSG
    ][
        char[50] buf
        u64 ours = whygen++;
        cgstrcpy(buf, "__whyimpl__");
        __builtin_utoa(buf + 11, ours);
        
        cgstrll* iter = result;
        while(iter != 0)
            if(iter.d != CG_TOK_IDENT) iter = iter.right continue end
            if(iter.text streq "__WHY__")
                __builtin_free(iter.text);
                iter.text = __builtin_strdup(buf);
            end
            iter = iter.right
        end
        __builtin_puts("<Had to write an instance...>");
        return result;
    ]
]

@mktemplate [
    doWhy2
    [
        [__WHY__();]
        @global
        fn codegen __WHY__():
            __builtin_puts(MSG);
            __builtin_puts("<Brought to you by Why2>")
        end
    ][
        MSG
    ][
        char[50] buf
        u64 ours = whygen++;
        cgstrcpy(buf, "__whyimpl__");
        __builtin_utoa(buf + 11, ours);
        
        cgstrll* iter = result;
        while(iter != 0)
            if(iter.d != CG_TOK_IDENT) iter = iter.right continue end
            if(iter.text streq "__WHY__")
                __builtin_free(iter.text);
                iter.text = __builtin_strdup(buf);
            end
            iter = iter.right
        end
        __builtin_puts("<Had to write an instance...>");
        return result;
    ]
]

@mktemplate[
    domath
    typed
    [
        [__WHY__()]
        @global
        fn codegen __WHY__()->TYPE:
            return (TYPE)15/(TYPE)7;
        end
    ][
        TYPE
    ][
        char[50] buf
        u64 ours = whygen++;
        cgstrcpy(buf, "__matimpl__");
        __builtin_utoa(buf + 11, ours);
        
        cgstrll* iter = result;
        while(iter != 0)
            if(iter.d != CG_TOK_IDENT) iter = iter.right continue end
            if(iter.text streq "__WHY__")
                __builtin_free(iter.text);
                iter.text = __builtin_strdup(buf);
            end
            iter = iter.right
        end
        __builtin_puts("<Wrote an instance for doing math...>");
        return result;
    ]
]


fn codegen codegen_main():
    @doWhy  "For fun and pleasure!"
    @doWhy  "For fun and pleasure!"
    @doWhy  "For fun and pleasure!"
    @doWhy  "For fun and pleasure!"
    @doWhy  "For fun and joy!"
    @doWhy  "For Squealing and laughter!"
    @doWhy  "For Squealing and laughter!"
    @doWhy2 "For Squealing and laughter!!" 
    @doWhy2 "Intoxicating Programming Power!!!"
    float f = @domath[f32];
    f32 g = @domath[float];
    int q = @domath[i32];
    int q2 = @domath[int];
    @pprint[
        /   "Here's our math:"
        /int (f*100)
        /int (g*100)
        /int (q*100)
        /int (q2*100)
        /int (00000413e-2 * 50)
    ]
    //while(1) end
end
