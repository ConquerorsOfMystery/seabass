

#include <toc/bit64.hbas>
#include <toc/toc.hbas>
#include <toc/usermode_stdlib.hbas>

//mutate pprint....
@wksht prnt[
    [
        @pprint [println itoa ARG1]
    ][
        ARG1
    ]
]

/*
    String testing...
*/

fn strtest1():
    str a
    str b
    a.new("Hello there!");
    b.copy(a);
    @prnt[
        /   "<STR TEST>"
        /   "Here is A:"
        /   (a.d)
        /   "Here is B:"
        /   (b.d)
    ]
    b.dtor();
    a.new("Can you find the needle in the haystack, and replace it? well, can you? Can you find it in this haystack, or not???") ;
    b.new("in");
    str c
    c.new("i");
    a.replace(b,c);
    @prnt[
        /   "Here is A:"
        /   (a.d)
    ]
    if(a.len != strlen(a.d))
        @prnt[
            /   "Len failure!"
        ]
        sys_exit(1);
    end
    c.new("needle");
    b.new("needle in the");
    a.new("Can you find the needle in the haystack, and replace it? well, can you?") ;
    @prnt[
        /   "We find needle at:"
        /int (a.find(c))
    ]
    str* q = a.substr(a.find(c),b.len);
    if(q != 0 && q.d != 0)
        @prnt[
            /   "Here is Q:"
            /   (q.d)
        ]
        if(q.len != strlen(q.d))
            @prnt[
                /   "Len failure!"
            ]
            sys_exit(1);
        end
        q.dtor();
        q.free();
        q = 0
    else
        @prnt[
            /   "<ERR> It appears we failed to find it..."
        ]    
    end
    c.new("Cannot find this!");
    @prnt[
        /   "We find the unfindable needle at:"
        /int (a.find(c))
    ]
    u64 i
    for(i = 0, i < 100, i++)
        str qq
        qq.new("Will I leak?");
        a.new("Or perhaps I will");
        if(i == 73)
            str qqq
            qqq.new("But, perhaps, I will instead...")
            return
        end
    end
end

fn pstrtest1():
    pstr a
    pstr b
    a.new("Hello there!");
    b.copy(a);
    if(1)
        str aa
        str bb
        aa.frompstr(a);
        bb.frompstr(b);
        @prnt[
            /   "<PSTR TEST>"
            /   "Here is A:"
            /   (aa.d)
            /   "Here is B:"
            /   (bb.d)
        ]
    end
    b.dtor();
    a.new("Can you find the needle in the haystack, and replace it? well, can you? Can you find it in this haystack, or not???") ;
    b.new("in");
    pstr c
    c.new("i");
    a.replace(b,c);
    if(1)
        str aa
        str bb
        aa.frompstr(a);
        bb.frompstr(b);
        @prnt[
            /   "Here is A:"
            /   (aa.d)
        ]
    end
    c.new("needle");
    b.new("needle in the");
    a.new("Can you find the needle in the haystack, and replace it? well, can you?") ;
    @prnt[
        /   "We find needle at:"
        /int (a.find(c))
    ]
    pstr* q = a.substr(a.find(c),b.len);
    if(q != 0 && q.d != 0)
        if(1)
            str qq
            qq.frompstr(q);
            @prnt[
                /   "Here is q:"
                /   (qq.d)
            ]
        end
        q.dtor();
        q.free();
        q = 0
    else
        @prnt[
            /   "<ERR> It appears we failed to find it..."
        ]    
    end
    c.new("Cannot find this!");
    @prnt[
        /   "We find the unfindable needle at:"
        /int (a.find(c))
    ]
    u64 i
    for(i = 0, i < 100, i++)
        pstr qq
        qq.new("Will I leak?");
        a.new("Or perhaps I will");
        if(i == 73)
            pstr qqq
            qqq.new("But, perhaps, I will instead...")
            return
        end
    end
end

codegen int BUFSZ = 2048;
codegen int PREC = 2000;
codegen int PREC2 = 10;

fn ftoa_test():
    while(1)
        char[BUFSZ] buf
        char[BUFSZ] buf2
        char[BUFSZ] buf3
        u64 qq = 0;
        @prnt[
            /   "Enter a string...."
        ]
        while(qq < (constexpri(BUFSZ)-1))
            fread(get_stdin_handle(), buf+qq, 1)
            if(buf[qq] == 'q' || buf[qq] == 'Q')
                goto last
            elif(buf[qq] == '\n' || buf[qq] == '!')
                break
            end
            qq++
        end
        buf[qq] = 0;
        //buffer is filled...
        f64 g = atof(buf);
        ftoa_n(buf2, g, constexpri(PREC));
        f64 h = atof(buf2);
        ftoa_n(buf3, h, constexpri(PREC));
        f64 i = atof(buf3);
        @prnt[
            /   "buf is....."
            /   (buf)
            /   "buf2 is....."
            /   (buf2)
            /   "buf3 is....."
            /   (buf3)
        ]
        if(g == h)
            @prnt[/"IDENTICAL!"]
        else
            @prnt[/"NOT IDENTICAL!"]
        end
        if(buf2 strneq buf3)
            //investigate why!
            i64 i
            for(i = 0, buf2[i] == buf3[i], i++) end
            @prnt[
                /"<<FAIL>>"
                /"Here is your problem:"
                /(buf2 + i)
                /(buf3 + i)
                /"At location:"
                /int(i)
            ]
        end
    end
    :last
end
fn ftoa_test2():
    while(1)
        char[BUFSZ] buf
        char[BUFSZ] buf2
        char[BUFSZ] buf3
        u64 qq = 0;
        @prnt[
            /   "Enter a string...."
        ]
        while(qq < (constexpri(BUFSZ)-1))
            fread(get_stdin_handle(), buf+qq, 1)
            if(buf[qq] == 'q' || buf[qq] == 'Q')
                return
            elif(buf[qq] == '\n' || buf[qq] == '!')
                break
            end
            qq++
        end
        buf[qq] = 0;
        //buffer is filled...
        f64 g = atof(buf);
        ftoa_n(buf2, g, constexpri(PREC2));
        f64 h = atof(buf2);
        ftoa_n(buf3, h, constexpri(PREC2));
        f64 i = atof(buf3);
        @prnt[
            /   "buf is....."
            /   (buf)
            /   "buf2 is....."
            /   (buf2)
            /   "buf3 is....."
            /   (buf3)
        ]
        if(g == h)
            @prnt[/"IDENTICAL!"]
        else
            @prnt[/"NOT IDENTICAL!"]
        end
        if(buf2 strneq buf3)
            //investigate why!
            i64 i
            for(i = 0, buf2[i] == buf3[i], i++) end
            @prnt[
                /"<<FAIL>>"
                /"Here is your problem:"
                /(buf2 + i)
                /(buf3 + i)
                /"At location:"
                /int(i)
            ]
        end
    end
end

fn ftoa_test3():
    while(1)
        char[BUFSZ] buf
        char[BUFSZ] buf2
        char[BUFSZ] buf3
        u64 qq = 0;
        @prnt[
            /   "Enter a string...."
        ]
        while(qq < (constexpri(BUFSZ)-1))
            fread(get_stdin_handle(), buf+qq, 1)
            if(buf[qq] == 'q' || buf[qq] == 'Q')
                return
            elif(buf[qq] == '\n' || buf[qq] == '!')
                break
            end
            qq++
        end
        buf[qq] = 0;
        //buffer is filled...
        f64 g = atof(buf);
        ftoa(buf2, g);
        f64 h = atof(buf2);
        ftoa(buf3, h);
        f64 i = atof(buf3);
        @prnt[
            /   "buf is....."
            /   (buf)
            /   "buf2 is....."
            /   (buf2)
            /   "buf3 is....."
            /   (buf3)
        ]
        if(g == h)
            @prnt[/"IDENTICAL!"]
        else
            @prnt[/"NOT IDENTICAL!"]
        end
        if(buf2 strneq buf3)
            //investigate why!
            i64 i
            for(i = 0, buf2[i] == buf3[i], i++) end
            @prnt[
                /"<<FAIL>>"
                /"Here is your problem:"
                /(buf2 + i)
                /(buf3 + i)
                /"At location:"
                /int(i)
            ]
        end
    end
end

fn pub main()->i32:
    strtest1();
    pstrtest1();
    ftoa_test();
    ftoa_test2();
    ftoa_test3();
end

/*
    Our code generator...
*/
fn codegen codegen_main():
    cg_emitC(SEABASS_STDLIB_PREFIX);
end


