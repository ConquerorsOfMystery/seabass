
#include <meta>

struct mystruct
    noexport
    int a
    int b
    int c
end

method codegen mystruct.ctor:
    
end

method codegen mystruct.dtor:
    this.a = 0;
    this.b = 0;
    this.c = 0;
    @pprint[
        /   "Death..."
    ]
end


fn codegen codegen_main():
    //while(1) end
    @cgvec[i32] myintvec
    @cgvec[long] myintvec2
    @cgvec[llong] myintvec3
    
    myintvec.push(32);
    myintvec.push(-33);
    myintvec.push(34);
    myintvec2 := myintvec;
    myintvec.ctor();
    //myintvec3 := myintvec;
    @pprint[
        /   "Dumping elements..."
        /int(myintvec2.d[2])
        /int(myintvec2.d[1])
        /int(myintvec2.d[0])
    ]
    
    if(1)
        @cgvec_s[mystruct] mystructvec
        mystruct q
        q.a = -22;
        mystructvec.push(q);
        q.a = 8;
        mystructvec.push(q);
        q.a = 9;
        mystructvec.push(q);
        q.a = 10;
        mystructvec.push(q);
        @pprint[
            /   "Dumping mystructvec..."
            /int(mystructvec.d[0].a)
            /int(mystructvec.d[1].a)
            /int(mystructvec.d[2].a)
            /int(mystructvec.d[3].a)
        ]
    end
    @pprint[/bar]
    if(2)
        @cgvec[mystruct] mystructvec
        if(1)
            mystruct q
            q.a = -22;
            mystructvec.push(q);
            q.a = 45;
            mystructvec.push(q);
            q.a = 1<<30;
            mystructvec.insert(q,0);
            q.a = 29;
            mystructvec.push(q);
        end
        @pprint[
            /   "Dumping mystructvec (classes)..."
            /int(mystructvec.d[0].a)
            /   "For comparison, 1<<30 is..."
            /int(1<<30)
            /int(mystructvec.d[1].a)
            /int(mystructvec.d[2].a)
            /int(mystructvec.d[3].a)
        ]
    end
end
