
#include "include_test.txt"


fn codegen not_pure_function():end

fn codegen pure addnums(int a, int b)->int:
	return a+b;
end

fn codegen add7tonum(int a)->int:
	return a + 7;
end

fn codegen add12tonum(int a)->int:
	return a + 12;
end

fn codegen returns1()->int:
    __builtin_puts("Returning 1");
    return 1;
end

proc codegen returns1_2()->int:
    __builtin_puts("Returning 1, but better!");
    return 1;
end

proc codegen returns1_3()->int:
    __builtin_puts("Returning 1, yet another time!");
    return 1;
end

fn codegen returns0()->int:
    __builtin_puts("Returning 0");
    return 0;
end

fn codegen returns0_2()->int:
    __builtin_puts("Returning 0, again!");
    return 0;
end

fn codegen returns0_3()->int:
    __builtin_puts("Returning 0, yet again!");
    return 0;
end

fn codegen pure subnums(int a, int b)->int:
	//i_unused = cast(double*) 0;
	//not_pure_function();
	return a-b;
	//this is never executed but i'm testing the parsing.
	addnums(1,1);
	tail addnums
end

class myClass
	int x
	int y
	int z
end

//test for error on recursive definition of a struct/class.
/*
class recursiveClass
	recursiveClass[1] a
	recursiveClass b
end
*/

class containsSubClass
	myClass alfred
	myClass bigboy
	sqword bruh
end	

class containsArrayOfSubclasses
	int a
	int b
	int c
	myClass[4000] thingies
	int[400] integers
end

class ctor_dtor_tester
    int a;
    char* q;
end

codegen int level_up = 1;

method codegen ctor_dtor_tester.ctor():
    this.a = level_up++;
    char[50] buf
    this.q = __builtin_malloc(2048);
    __builtin_itoa(buf, this.a);
    __builtin_puts("Hello! I am:");
    __builtin_puts(buf);
end

method codegen ctor_dtor_tester.dtor():
    char[50] buf
    __builtin_itoa(buf, this.a);
    __builtin_puts("Bye! My id was...");
    __builtin_puts(buf);
    __builtin_free(this.q);
    level_up--;
    
end


method codegen myClass:doStuff()->u64:
	if(this.x eq 3)
		__builtin_puts("I can indeed see that (myClass:doStuff)");
	end
	//if(1) elseif(1) end
	this.x = 3;
	//this.x = cast(int)3;
	return 0;
end

function myFunc():
    return;
end

function codegen test_type_conversion():
    float ff = 137.91;
    double dd = 1973.7542;
    byte a = 20;
    sbyte b = -2;
    ushort c = 739;
    sshort d = -32020;
    uint e = 78951;
    int f = -78951;
    uqword g = (1<<50) + 739;
    sqword h = -1 * ((1<<60) + 739);
    char* ptr = (char*)91824;
    
    
    char[2048] buf
#define prnt __builtin_puts(buf);
    
    /*
        Test conversions to FLOAT
    */
    __builtin_puts("FLOAT:")
    if(1)
        float t
        t = ff;
        __builtin_ftoa(buf,t);
        prnt
        
        t = dd;
        __builtin_ftoa(buf,t);        
        prnt        
        t = a;
        __builtin_ftoa(buf,t);        
        prnt
        t = b;
        __builtin_ftoa(buf,t);        
        prnt
        t = c;
        __builtin_ftoa(buf,t);        
        prnt
        t = d;
        __builtin_ftoa(buf,t);        
        prnt
        t = e;
        __builtin_ftoa(buf,t);        
        prnt
        t = f;
        __builtin_ftoa(buf,t);        
        prnt
        t = g;
        __builtin_ftoa(buf,t);        
        prnt
        t = h;
        __builtin_ftoa(buf,t);        
        prnt
        t = (float)(uptr)ptr;
        __builtin_ftoa(buf,t);        
        prnt
    end
    __builtin_puts("DOUBLE:")
    if(1)
        double t
        t = ff;
        __builtin_ftoa(buf,t);
        prnt
        
        t = dd;
        __builtin_ftoa(buf,t);        
        prnt        
        t = a;
        __builtin_ftoa(buf,t);        
        prnt
        t = b;
        __builtin_ftoa(buf,t);        
        prnt
        t = c;
        __builtin_ftoa(buf,t);        
        prnt
        t = d;
        __builtin_ftoa(buf,t);        
        prnt
        t = e;
        __builtin_ftoa(buf,t);        
        prnt
        t = f;
        __builtin_ftoa(buf,t);        
        prnt
        t = g;
        __builtin_ftoa(buf,t);        
        prnt
        t = h;
        __builtin_ftoa(buf,t);        
        prnt
        t = (double)(uptr)ptr;
        __builtin_ftoa(buf,t);        
        prnt
    end
    __builtin_puts("BYTE:")
    if(1)
        byte t
        t = ff;
        __builtin_utoa(buf,t);
        prnt
        t = dd;
        __builtin_utoa(buf,t);        
        prnt        
        t = a;
        __builtin_utoa(buf,t);        
        prnt
        t = b;
        __builtin_utoa(buf,t);        
        prnt
        t = c;
        __builtin_utoa(buf,t);        
        prnt
        t = d;
        __builtin_utoa(buf,t);        
        prnt
        t = e;
        __builtin_utoa(buf,t);        
        prnt
        t = f;
        __builtin_utoa(buf,t);        
        prnt
        t = g;
        __builtin_utoa(buf,t);        
        prnt
        t = h;
        __builtin_utoa(buf,t);        
        prnt
        t = (byte)ptr;
        __builtin_utoa(buf,t);        
        prnt
    end
    
    __builtin_puts("SBYTE:")
    if(1)
        sbyte t
        t = ff;
        __builtin_itoa(buf,t);
        prnt
        t = dd;
        __builtin_itoa(buf,t);        
        prnt        
        t = a;
        __builtin_itoa(buf,t);        
        prnt
        t = b;
        __builtin_itoa(buf,t);        
        prnt
        t = c;
        __builtin_itoa(buf,t);        
        prnt
        t = d;
        __builtin_itoa(buf,t);        
        prnt
        t = e;
        __builtin_itoa(buf,t);        
        prnt
        t = f;
        __builtin_itoa(buf,t);        
        prnt
        t = g;
        __builtin_itoa(buf,t);        
        prnt
        t = h;
        __builtin_itoa(buf,t);        
        prnt
        t = (sbyte)ptr;
        __builtin_itoa(buf,t);        
        prnt
    end
    
        __builtin_puts("USHORT:")
    if(1)
        ushort t
        t = ff;
        __builtin_utoa(buf,t);
        prnt
        t = dd;
        __builtin_utoa(buf,t);        
        prnt        
        t = a;
        __builtin_utoa(buf,t);        
        prnt
        t = b;
        __builtin_utoa(buf,t);        
        prnt
        t = c;
        __builtin_utoa(buf,t);        
        prnt
        t = d;
        __builtin_utoa(buf,t);        
        prnt
        t = e;
        __builtin_utoa(buf,t);        
        prnt
        t = f;
        __builtin_utoa(buf,t);        
        prnt
        t = g;
        __builtin_utoa(buf,t);        
        prnt
        t = h;
        __builtin_utoa(buf,t);        
        prnt
        t = (ushort)ptr;
        __builtin_utoa(buf,t);        
        prnt
    end
    
    __builtin_puts("SHORT:")
    if(1)
        sshort t
        t = ff;
        __builtin_itoa(buf,t);
        prnt
        t = dd;
        __builtin_itoa(buf,t);        
        prnt        
        t = a;
        __builtin_itoa(buf,t);        
        prnt
        t = b;
        __builtin_itoa(buf,t);        
        prnt
        t = c;
        __builtin_itoa(buf,t);        
        prnt
        t = d;
        __builtin_itoa(buf,t);        
        prnt
        t = e;
        __builtin_itoa(buf,t);        
        prnt
        t = f;
        __builtin_itoa(buf,t);        
        prnt
        t = g;
        __builtin_itoa(buf,t);        
        prnt
        t = h;
        __builtin_itoa(buf,t);        
        prnt
        t = (short)ptr;
        __builtin_itoa(buf,t);        
        prnt
    end
    
    
    __builtin_puts("UINT:")
    if(1)
        uint t
        t = ff;
        __builtin_utoa(buf,t);
        prnt
        t = dd;
        __builtin_utoa(buf,t);        
        prnt        
        t = a;
        __builtin_utoa(buf,t);        
        prnt
        t = b;
        __builtin_utoa(buf,t);        
        prnt
        t = c;
        __builtin_utoa(buf,t);        
        prnt
        t = d;
        __builtin_utoa(buf,t);        
        prnt
        t = e;
        __builtin_utoa(buf,t);        
        prnt
        t = f;
        __builtin_utoa(buf,t);        
        prnt
        t = g;
        __builtin_utoa(buf,t);        
        prnt
        t = h;
        __builtin_utoa(buf,t);        
        prnt
        t = (u32)ptr;
        __builtin_utoa(buf,t);        
        prnt
    end
    
    __builtin_puts("INT:")
    if(1)
        int t
        t = ff;
        __builtin_itoa(buf,t);
        prnt
        t = dd;
        __builtin_itoa(buf,t);        
        prnt        
        t = a;
        __builtin_itoa(buf,t);        
        prnt
        t = b;
        __builtin_itoa(buf,t);        
        prnt
        t = c;
        __builtin_itoa(buf,t);        
        prnt
        t = d;
        __builtin_itoa(buf,t);        
        prnt
        t = e;
        __builtin_itoa(buf,t);        
        prnt
        t = f;
        __builtin_itoa(buf,t);        
        prnt
        t = g;
        __builtin_itoa(buf,t);        
        prnt
        t = h;
        __builtin_itoa(buf,t);        
        prnt
        t = (sint)ptr;
        __builtin_itoa(buf,t);        
        prnt
    end
    
    
    __builtin_puts("QWORD:")
    if(1)
        qword t
        t = ff;
        __builtin_utoa(buf,t);
        prnt
        t = dd;
        __builtin_utoa(buf,t);        
        prnt        
        t = a;
        __builtin_utoa(buf,t);        
        prnt
        t = b;
        __builtin_utoa(buf,t);        
        prnt
        t = c;
        __builtin_utoa(buf,t);        
        prnt
        t = d;
        __builtin_utoa(buf,t);        
        prnt
        t = e;
        __builtin_utoa(buf,t);        
        prnt
        t = f;
        __builtin_utoa(buf,t);        
        prnt
        t = g;
        __builtin_utoa(buf,t);        
        prnt
        t = h;
        __builtin_utoa(buf,t);        
        prnt
        t = (uqword)ptr;
        __builtin_utoa(buf,t);        
        prnt
    end
    
    __builtin_puts("SQWORD:")
    if(1)
        sqword t
        t = ff;
        __builtin_itoa(buf,t);
        prnt
        t = dd;
        __builtin_itoa(buf,t);        
        prnt        
        t = a;
        __builtin_itoa(buf,t);        
        prnt
        t = b;
        __builtin_itoa(buf,t);        
        prnt
        t = c;
        __builtin_itoa(buf,t);        
        prnt
        t = d;
        __builtin_itoa(buf,t);        
        prnt
        t = e;
        __builtin_itoa(buf,t);        
        prnt
        t = f;
        __builtin_itoa(buf,t);        
        prnt
        t = g;
        __builtin_itoa(buf,t);        
        prnt
        t = h;
        __builtin_itoa(buf,t);        
        prnt
        t = (sqword)ptr;
        __builtin_itoa(buf,t);        
        prnt
    end
    
    __builtin_puts("PTR:")
    if(1)
        char* t
        t = (char*)(sqword)ff;
        __builtin_utoa(buf,(uqword)t);
        prnt
        t = (char*)(sqword)dd;
        __builtin_utoa(buf,(uqword)t);        
        prnt        
        t = (char*)a;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)b;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)c;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)d;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)e;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)f;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)g;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = (char*)h;
        __builtin_utoa(buf,(uqword)t);        
        prnt
        t = ptr;
        __builtin_utoa(buf,(uqword)t);        
        prnt
    end
    
    
#undef prnt

end

fn predecl myFunction(int arg1, int arg2)->int;
fn predecl myFunction(int arg1, int arg2)->int;
fn predecl myFunction(int arg1, int arg2)->int;

fn myFunction(int arg1, int arg2)->int:
    return arg1 + arg2;

end
fn predecl myFunction(int arg1, int arg2)->int;
fn predecl myFunction(int arg1, int arg2)->int;
fn predecl myFunction(int arg1, int arg2)->int;
fn predecl myFunction(int arg1, int arg2)->int;
fn predecl myFunction(int arg1, int arg2)->int;

fn codegen c_strcpy(byte* dest, byte* src):
	while(src[0] != 0)
		dest[0] = src[0];
		src = src + 1;
		dest = dest + 1;
	end
	dest[0] = 0;
end

method codegen myClass:init_stuff(int x, int y, int z):
	this.x = x;
	this.y = y;
	this.z = z;
	return;
end

method codegen myClass:print(int mode):
	char[500] buf;

	if(mode < 1) return; end
	c_strcpy(buf, "X=");
	__builtin_itoa(buf+2, this.x);
	__builtin_puts(buf);

	if(mode < 2) return; end
	c_strcpy(buf, "Y=");
	__builtin_itoa(buf+2, this.y);
	__builtin_puts(buf);
	if(mode < 3) return; end
	c_strcpy(buf, "Z=");
	__builtin_itoa(buf+2, this.z);
	__builtin_puts(buf);
end

fn codegen assignArrayMember(int* a):
	a[3] = 2;
	return;
end

fn codegen manipClass(myClass* p):
	if(p.x === 3)
		__builtin_puts("I can also indeed see that.");
	end
	p.x = 3;
end

fn codegen cause_segfault():
	p = cast(char*)0;

	p[10] = 400;
	char* p;
end


fn codegen switch_test(int a):
    __builtin_puts("TESTING SWITCH....")
	jump do_switch
	
	:is1
		__builtin_puts("I see a 0!");
	return;
	:is2
		__builtin_puts("I see a 1!");
	return;

	:is3
		__builtin_puts("I see a 2!");
		__builtin_puts("Prepare for a test of FOR:");
		
		if(1)
			i = 0;
			for(i=1, i<=6, i++)
				int q;
				//goto getout;
				__builtin_puts("!");
				int j
				//break
				for(j = 0, j < 2, j++)
					__builtin_puts("I should print twice six times! Unless you put a break here:"); 
					continue 
					break
				end
			end
			:getout
			__builtin_puts("Got out!");
		end
		float i;
		//cause_segfault();
	return;
    __builtin_puts("This statement never executes.");
	:do_switch
	switch(a) is1, is2, is3, do_switch do_switch;


	return;

end


codegen int myGlobalLoopCounter = 10;
codegen double tail_test_pow = 0;

//not exactly using 'tail'...
fn codegen tail_test2()->u64:
	if(myGlobalLoopCounter > 0)
		myGlobalLoopCounter--;
		return 1 + tail_test2();
	end
	return 1.0e+1;
end

fn codegen tail_test()->i64:
	myGlobalLoopCounter--;
	tail_test_pow = tail_test_pow + tail_test_pow;
	if(myGlobalLoopCounter > 1)
		tail tail_test
	end
	return tail_test_pow;
end

fn codegen tail_inf_loop():
    tail tail_inf_loop
end


//Demonstration of target configuration.
# __CBAS_TARGET_WORDSZ 32
# __CBAS_TARGET_MAX_FLOAT 32

fn inline pure impl_streq(char* a, char* b)->i32;

fn streq_tester():
	char* a 
	char* b 
	int i

	a  = "Hello!";
	b = "Goodbye!";
	i = a streq b;

end


data predecl codegen i32 myintegers;
data codegen int myintegers 0,1,2,3+4;

atomic int myatom = 3;

data public string mystring "Hello world!";

function inline pure impl_streq(char* a, char* b)->i32:
	int i
	i = 0;
	for(i = 0, 1, i++)
		if(a[i]!=b[i]) return 0; end
		if(a[i] == b[i])
			if(a[i] == 0) return 1; end
		end
	end
end

//do not reuse this class! it's not good!
class codegen_ast_dontreuse
	char** type_table
	char*** symbol_table
	char** oop_metadata;
	char*** scopestack
	char*** loopstack
	
	u64* active_function
	u64* ntypedecls
	u64* nsymbols
	u64* nscopes
	u64* nloops
end

codegen int dostuff_counter = 0;

proc codegen parsehook_dostuff():
	__builtin_puts("QParsehook was invoked"+1);
	if(dostuff_counter)
	    __builtin_puts("At least the second time!");
	    //__builtin_exit(0); //terminate compilation.
	end
	dostuff_counter++;
	return;
end

@dostuff

proc codegen codegen_main():
	//invokes parsehook_dostuff
	;
	@dostuff
	;;;;
	myClass classy;
	myClass* f;
	classy.x = 3;
	double i;
	__builtin_puts("_______________________________");
	classy:doStuff();
	manipClass(classy);
	__builtin_puts("_______________________________");
	__builtin_puts("_____123_______________________");
	classy:init_stuff(1,2,3);
	classy:print(1);
	__builtin_puts("______456______________________");
	classy:init_stuff(4,5,6);
	classy:print(2);
	__builtin_puts("______789______________________");
	classy:init_stuff(7,8,9);
	classy:print(3);
	__builtin_puts("_______________________________");
	
	
	classy.x = 3;
	switch_test(2);


	f = classy;
	__builtin_puts("________________________Now for the real test!");
	f.x = 973;
	i = classy.x;

	
	if("Hello" streq "Hello1")
		__builtin_puts("Yes!");
	elif(get7()&0)
		__builtin_puts("Maybe?");
	elseif( 0 | (get7() || get7()))
		__builtin_puts("elseif is working!");
	else
		__builtin_puts("No!");
	end

	containsSubClass qqq;
	qqq.alfred := classy;
	qqq.bigboy := f;
	(cast(myClass*)f).x = 3;
	i = qqq.bigboy.x;
	if(1)
		char[500] buf

		__builtin_itoa(buf, i);
		//buf[499] = 0;
		__builtin_puts("This is I after assigning from bigboy's x:");
		__builtin_puts(buf);

		__builtin_itoa(buf, 0x10000000000);
		//buf[499] = 0;
		__builtin_puts("This is a very large number:");
		__builtin_puts(buf);

		whomstvedaintly = 2.0 * 3.4;
		__builtin_ftoa(buf, whomstvedaintly);
		__builtin_puts("Here's whomstvedaintly:");
		__builtin_puts(buf);

		//declared at the end... oh! interesting...
		double whomstvedaintly
	end
	if(1)
			char[500] buf
			int* temp
		//test structs more thoroughly.
			containsArrayOfSubclasses fff;
			f.y = 17.3e-0;
			fff.thingies + 3 := f;
			i = (fff.thingies + 3).y;
		//
			__builtin_itoa(buf, i);
			__builtin_puts("This is I after assigning from fff.thingies of 3 dot y:");
			__builtin_puts(buf);

			(fff.thingies + 3).y = 400;
			f = fff.&thingies + 3;
			i = f.y;
		//
			__builtin_itoa(buf, i);
			__builtin_puts("This is I after assigning from fff.thingies of f.y, after f was assigned fff.thingies + 3:");
			__builtin_puts(buf);
			temp = fff.&integers;
			temp[37] = 12;
			temp[37] = -13;
			i = fff.integers[37];
			__builtin_itoa(buf, i);
			__builtin_puts("This is I after assigning to an aliased integer array in its members.:");
			__builtin_puts(buf);
	end

	i = 0;

	myGlobalLoopCounter = 3;
	tail_test_pow = 2.0;
	i = tail_test();
	if(1)
		char[500] buf;
		__builtin_itoa(buf, i);
		__builtin_puts("This is I after tail_test:");
		__builtin_puts(buf);
	end

	myGlobalLoopCounter = 11;
	i = tail_test2();
	if(1)
		char[500] buf;
		__builtin_itoa(buf, i);
		__builtin_puts("This is I after tail_test2:");
		__builtin_puts(buf);
	end

	if(1)
		int a
		int b
		uint c
		a = -47;
		b = -47;
		c = -47;
		char[500] buf;
		__builtin_itoa(buf, a);
		__builtin_puts("This is a after an assignment chain:");
		__builtin_puts(buf);
	end

	if(1)
		char[500] buf;
		int[5] mylist;
		int* alias;
		alias = mylist + 1;
		alias[0] = -3;
		alias[1] = -7;
		alias[2] = -4;
		myClass bruhbruh;

		__builtin_itoa(buf, mylist[1]);
		__builtin_puts("array test, mylist[1]:");
		__builtin_puts(buf);

		__builtin_itoa(buf, mylist[2]);
		__builtin_puts("array test, mylist[2]:");
		__builtin_puts(buf);
		
		__builtin_itoa(buf, mylist[3]);
		__builtin_puts("array test, mylist[3]:");
		__builtin_puts(buf);

		__builtin_utoa(buf, cast(uqword)(mylist));
		__builtin_puts("array addressing test, mylist pointer:");
		__builtin_puts(buf);		

		__builtin_utoa(buf, cast(uqword)(mylist+3));
		__builtin_puts("array addressing test, mylist+3 pointer:");
		__builtin_puts(buf);

		__builtin_utoa(buf, cast(uqword)(bruhbruh));
		__builtin_puts("array addressing test, bruhbruh pointer:");
		__builtin_puts(buf);

		__builtin_utoa(buf, cast(uqword)(bruhbruh+2));
		__builtin_puts("array addressing test, bruhbruh+2 pointer:");
		__builtin_puts(buf);

		__builtin_utoa(buf, cast(uqword)(bruhbruh-2));
		__builtin_puts("array addressing test, bruhbruh-2 pointer:");
		__builtin_puts(buf);

		__builtin_utoa(buf, myintegers[3]);
		__builtin_puts("data test, myintegers[3]:");
		__builtin_puts(buf);
	end
	

	i = subnums(3,0);

	if(1)
		char[500] buf
		char* b
		int funcpointertest

		
		b = getfnptr(add7tonum);
		__builtin_utoa(buf, cast(u64)b);
		__builtin_puts("getfnptr test, getfnptr(add7tonum):");
		__builtin_puts(buf);
		
		funcpointertest = callfnptr[add12tonum](b)(13);
		//funcpointertest = callfnptr[add12tonum](13.0)(13);
		__builtin_utoa(buf, funcpointertest);
		__builtin_puts("callfnptr test (add7tonum), should be 7 + 13, or 20:");
		__builtin_puts(buf);

		b = getfnptr(subnums);
		funcpointertest = callfnptr[addnums](b)(256,100);
		__builtin_utoa(buf, funcpointertest);
		__builtin_puts("callfnptr test (subnums), should be 256 - 100, or 156:");
		__builtin_puts(buf);


		getglobalptr(myGlobalLoopCounter)[1-1] = -49;
		__builtin_itoa(buf, myGlobalLoopCounter);
		__builtin_puts("getglobalptr test, should be -49:");
		__builtin_puts(buf);
	    
	    __builtin_itoa(buf, (cast(int)1<<10));
 		__builtin_puts("lsh test, should be 1024:");
        __builtin_puts(buf);	    
        
        __builtin_itoa(buf, (cast(i16)1024.0>>10) );
 		__builtin_puts("rsh test, should be 1:");
        __builtin_puts(buf);
	end
	
	while((i > 0) /*|| 1*/
	)
		__builtin_puts("count me");
		i--;
	end

	while(1) 
	    if(1) break end
	
	end
	if(1)
        char[500] buf;
        __builtin_utoa(buf,__builtin_struct_metadata(0));
        __builtin_puts("Size of type struct:");
        __builtin_puts(buf);
        
        __builtin_utoa(buf,__builtin_struct_metadata(1));
        __builtin_puts("Size of typedecl struct:");
        __builtin_puts(buf);
        
        __builtin_utoa(buf,__builtin_struct_metadata(2));
        __builtin_puts("Size of symdecl struct:");
        __builtin_puts(buf);
        
        __builtin_utoa(buf,__builtin_struct_metadata(3));
        __builtin_puts("Size of scope struct:");
        __builtin_puts(buf);
        
        __builtin_utoa(buf,__builtin_struct_metadata(4));
        __builtin_puts("Size of stmt struct:");
        __builtin_puts(buf);
        
        
        __builtin_utoa(buf,__builtin_struct_metadata(5));
        __builtin_puts("Size of expr_node struct:");
        __builtin_puts(buf);        
        
        
        __builtin_utoa(buf,__builtin_struct_metadata(6));
        __builtin_puts("Size of seabass_builtin_ast struct:");
        __builtin_puts(buf);
    end


	if(1)
		__builtin_puts("Now, for a test of a large loop.");
		i64 quixote;
		for(quixote = 0, quixote < (5<<10), quixote++)
			i64 quixote_2;
			quixote_2 = quixote + (1|3);
		end
		__builtin_puts("It's over!");
	end

	if(1)
		char[500] buf
		codegen_ast_dontreuse* q;
		
		q = cast(codegen_ast_dontreuse*)__builtin_get_ast();
		__builtin_itoa(buf, q.nsymbols[0]);
		__builtin_puts("This is how many symbols were defined in the unit:");
		__builtin_puts(buf);
		
	end

	if(0)
		__builtin_puts("Today!");
	elif(1)

		if(0)
			__builtin_puts("Tomorrow?");
		elif(0)
			__builtin_puts("Here!");
		else
			__builtin_puts(">>???");
		end
		__builtin_puts(">>>There!");
	else
		__builtin_puts("Anywhere!");
	end


	__builtin_puts("\tGoodbye!!!!!\nHave a Good day!!!!!!!!!!!!!\n");
	//while(1) end
	
	/*if(1)
	    int a
	    char* b
	    a = a - b;
	end*/
	//tail_inf_loop();
	__builtin_puts("Testing short circuiting!")
	if(returns0() && returns1())
	    __builtin_puts("This shouldn't print!")
	end	
    __builtin_puts("You should only have seen one printout.")
	if(returns1() && returns1())
	    __builtin_puts("You should have seen two printout.")
	end
	if(returns1() || returns1())
	    __builtin_puts("You should have seen one printout.")
	end	
	if(returns0() || returns0() || returns1())
	    __builtin_puts("You should have seen three, 0,0,1");
	end
	if(returns0() || returns0_2() || returns0_3() || returns1_2())
	    __builtin_puts("0 0_2 0_3 1_2");
	end
	
    if(returns1() && returns1_2() && returns1_3())
	    __builtin_puts("1 1_2 1_3");
	end
	test_type_conversion();
	//test construction and destruction...
	
	if(1)
    	ctor_dtor_tester a //1
    	ctor_dtor_tester b //2
    	ctor_dtor_tester c //3
    	i64 bruhmoment
    	for(bruhmoment = 0, bruhmoment != 20, bruhmoment++)
            ctor_dtor_tester Exacerbated //4
    	    if(1)
    	        ctor_dtor_tester quality //5
    	        ctor_dtor_tester quantity //6
    	        if(bruhmoment == 7)
    	            ctor_dtor_tester Velocity //7
    	            __builtin_puts("IT HAPPENED!!!");
    	            break
    	        end
    	    end
    	    if(bruhmoment == 4)
    	        ctor_dtor_tester weemawhack //5
    	        ctor_dtor_tester weemawhack2 //6
    	        goto nomore
    	    end
    	    continue
    	    
    	end
	
	end
	:nomore
	if(1)
	
    	
        i8 v1 = -1
        u32 d1 = v1 //should be promoted from 0xff to 0xffFFffFF
        i32 d2 = v1 //same
        if(d1 != d2)
            __builtin_puts(" Sign extension is improperly implemented!");
            __builtin_exit(1);
        end	
	end
	for(0,0,0)
        __builtin_puts("For is improperly implemented!");	
	end
	for(0,1,0)
	    
        __builtin_puts("For(0,1,0) is properly implemented!");	
        break
	end
    __builtin_puts("Buhbye!");	
	
	return;
end


function somefun():
    int a
    
    //a = @dostuff; //imagine that this did more.
    return;
end


function somefun2();
function somefun2():
end


function somefun3():end
fn forgivethybrother()->sqword*:
	return cast(sqword*)0;
end

