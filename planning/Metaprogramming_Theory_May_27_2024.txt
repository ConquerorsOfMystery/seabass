METAPROGRAMMING THEORY- NOUNS AND BINDING POINTS

The fundamental structure of a piece of software architecture is
built out of nouns with relationships. At the very bottom, it
becomes a sequence of bytes, or above that instructions and data,
and above that C program constructs like for, if-else, while, types,
expressions, and above that you could have algorithms and generic types
and classes, and so-on and so-forth.

Another way to think about this is that you have an ordered structure (whether
a tree or simply a linear sequence) of fields. Each field can have one of a set of
things in it, and/or some amount of data.

An instruction in assembly can recieve data arguments, whether they be bytes to be
placed in (or math'd with) registers, addresses, or register names/ids.

Higher order languages are comprised of different constructs with different fields.
The constructs in these higher order languages decay into lower level ones. The constructs
chosen are ones which are intrinsically useful in building computer programs.

As long as the constructs are useful and effective (efficient enough) then the programming
language is a success. The more useful and versatile the constructs, and the easier they are
to learn and manipulate, the better the programming language.

The principle hypothesis of Metaprogramming theory, now, is that better constructs exist
for writing computer programs which do not exist in most programming languages, and in many
are not even possible at all.

Seabass is powerful enough for almost (if not actually) any concievable programming construct to exist
within it. Experimentation and exploration of computer programming may aid me in discovering what those
constructs are.

Discovering existing constructs in programming and then encoding them as language features is a key
concept.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Due to the way programming currently works, even very simple pieces of logic are ultimately
very complex to enter. Writing a string library is a task which, conceptually, should be
mere seconds or minutes of work but in practice takes hours (due to minutae).

HOW DO I ACCELERATE THE PROCESS OF WRITING A STRING LIBRARY?

A string is a form of container. In C it's typically a form of vector that uses a magic
value (null) instead of a length.

The "hard part" is writing the code which manipulates one or more strings efficiently,
chopping them up, mixing them, searching them, appending them, etcetera.

The basic process of implementing a string library is to implement the most fundamental
string operations and then implement the higher level ones "out of" the lower level
ones, excepting for efficiency's sake you may "break out the tweezers" and write partial
re-implementations to avoid redundant operations.

>> It would be easier to implement a string library if a function could be written "generically"
for alternate information specifications... Like, for example, it would be faster to calculte
the length of a string if there was a "minimum length" given. This could help remove redundancy
in calculation.

>> One could think of a string class as a subclass of atomically typed (i.e. char, short, int, float, qword, double)
vector containers. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HOW DO I ACCELERATE THE PROCESS OF WRITING NEW LIBRARIES/APPLICATIONS?

1. Metaprogramming tools. Making the creation of new syntaxes easy.

2. Having a lot of libraries to begin with- the more code you can sample from,
the more code you can write from it.

3. Having well-defined, well-structured ways to "hook up" different libraries
together and make them work. Minimal glue required.

4. Algorithm Examples/demos. Make a "Recipe book" for programming with lots of small
graphical demos showcasing algorithms.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SEABASS DEVELOPMENT ROADMAP 2024 (LATE MAY)

1. Search up lists of algorithms and whatnot to implement in Seabass.
2. Implement a large series of demos using funbas which use graphics+sound.
3. Create the "Objects and Properties system" with contexts. We could maybe
use the UNRAS but that data structure, while universal, may be inefficient.

The goal of this system would be to have "software architecture elements" be
the building blocks of programming. Glue code should be eliminated by having libraries
adapt to fit each other.
4. Look through my demos and look for patterns in the designs of them which
could be abstracted out. Think about how that abstraction would take place.
5. Start writing real software- how about that 2D dungeon crawler thing?



