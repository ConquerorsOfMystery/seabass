
#guard try_throw_library_CBAS

/*
    FAILABLE CONTROL FLOW ABSTRACTION - THE TRY BLOCK.
    
    The try block simulates exception handling- as long
    as there are try blocks with repeated throws going
    all the way up the call stack to the proper
    receiver, then try and throw will work correctly.
    
    Note that try-throw will NOT function correctly if you
    do not put try-catch blocks surrounding all
    your failable-functions all the way through the call stack...
    
    USAGE
    
    char* myvar
    try[
        myvar = myFunction()
    ][
        my_error_logger("<DBG> Caught exception from myFunction");
        //pass the exception upward another level...
        throw (my_retval_type)0;
    ]
    
    
    TODO:
    Create a parsehook metadata library which says
    what parsehooks can or cannot be expanded at global scope.
    
    I would like to write a "failable" wrapper for Seabass functions
    which 
    
    
*/

#include "cgwksht.hbas"
#include "cgerrno.hbas"

#define try @_____try
#define throw @_____throw

@wksht _____throw[
    [
        ;__TRY_____SETTERNO__(1);
        return RETVAL;
    ][
        RETVAL THROWVAL
    ][
         /*
            Depending on whether we are in a codegen function or not,
            we have to do something different...
        */
        cgast* ast
        u64 active_function
        u64 is_in_codegen_fn
        ast = (cgast*)__builtin_get_ast();
        active_function = ast.active_function[0];
        if(active_function > ast.nsymbols[0])
            __builtin_puts("THROW ERROR!!!");
            __builtin_puts("You may not invoke throw at global scope!");
            if(__builtin_peek() != 0)
                /*Emit a helpful error message.*/
                cgstrll* where_we_are = (cgstrll*)__builtin_peek();
                __builtin_puts("Here is a dump of the entire unit from the current position:");
                where_we_are.debug_print();
            end
            __builtin_exit(1);
        end
        is_in_codegen_fn = (ast.symbol_table[0]+active_function).is_codegen;
        
        if((ast.symbol_table[0]+active_function).is_incomplete == 0)
            __builtin_puts("THROW ERROR!!!");
            __builtin_puts("You may not invoke throw at global scope!");
            if(__builtin_peek() != 0)
                /*Emit a helpful error message.*/
                cgstrll* where_we_are = (cgstrll*)__builtin_peek();
                __builtin_puts("Here is a dump of the entire unit from the current position:");
                where_we_are.debug_print();
            end
            __builtin_exit(1);
        end
        cgstrll* pp = result;
        while(pp != 0)
            if(
                pp.d == CG_TOK_IDENT &&
                pp.text streq "__TRY_____SETTERNO__"
            )
                __builtin_free(pp.text);
                if(is_in_codegen_fn)
                    pp.text = __builtin_strdup("cg_set_errno")
                else
                    pp.text = __builtin_strdup("set_errno")
                end
            end
            pp = pp.right
        end
        
        //result:debug_print();
        return result;
    ]
]


@wksht _____try[
    [
        ;__TRY_____SETTERNO__(0);
        if(1)
            CMD;
        end
        /*we take advantage of the standard here, it is always undefined behavior
        to have five underscores in a row. So we make sure to force the programmer
        to have done something truly egregious to cause an error...*/
        if(__TRY_____GETTERNO__())
            ONFAIL
        end
    ][
        CMD ONFAIL
    ][
        /*
            Depending on whether we are in a codegen function or not,
            we have to do something different...
        */
        cgast* ast
        u64 active_function
        u64 is_in_codegen_fn
        ast = (cgast*)__builtin_get_ast();
        active_function = ast.active_function[0];
        if(active_function > ast.nsymbols[0])
            __builtin_puts("TRY ERROR!!!");
            __builtin_puts("You may not invoke try at global scope!");
            if(__builtin_peek() != 0)
                /*Emit a helpful error message.*/
                cgstrll* where_we_are = (cgstrll*)__builtin_peek();
                __builtin_puts("Here is a dump of the entire unit from the current position:");
                where_we_are.debug_print();
            end
            __builtin_exit(1);
        end
        is_in_codegen_fn = (ast.symbol_table[0]+active_function).is_codegen;
        
        if((ast.symbol_table[0]+active_function).is_incomplete == 0)
            __builtin_puts("TRY CATCH ERROR!!!");
            __builtin_puts("You may not invoke try at global scope!");
            if(__builtin_peek() != 0)
                /*Emit a helpful error message.*/
                cgstrll* where_we_are = (cgstrll*)__builtin_peek();
                __builtin_puts("Here is a dump of the entire unit from the current position:");
                where_we_are.debug_print();
            end
            __builtin_exit(1);
        end
        
        /*
            Walk the token list and find the token with its
            identifier...
        */
        
        cgstrll* pp = result;
        while(pp != 0)
            if(
                pp.d == CG_TOK_IDENT &&
                pp.text streq "__TRY_____GETTERNO__"
            )
                __builtin_free(pp.text);
                if(is_in_codegen_fn)
                    pp.text = __builtin_strdup("cg_get_errno")
                else
                    pp.text = __builtin_strdup("get_errno")
                end
            elif(
                    pp.d == CG_TOK_IDENT &&
                pp.text streq "__TRY_____SETTERNO__"
            )
                __builtin_free(pp.text);
                if(is_in_codegen_fn)
                    pp.text = __builtin_strdup("cg_set_errno")
                else
                    pp.text = __builtin_strdup("set_errno")
                end
            end
            pp = pp.right
        end
        
        //result:debug_print();
        return result;
    
    ]
]



