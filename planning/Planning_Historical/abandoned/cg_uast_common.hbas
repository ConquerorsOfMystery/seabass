
#guard compiletime_universal_ast_common_impl_patterns_DMHSW

#include "cgtoken_manip_tools.hbas"
#include "cg_uast.hbas"

/*
    COMMON IMPLEMENTATION PATTERNS FOR THE UNIVERSAL AST
    
    Mostly just constants...
*/

codegen u64 cg_uast_coord_parent = (0xf<<(64-4)) | 0;
codegen u64 cg_uast_coord_child = (0xf<<(64-4)) | 1;
//if you have a system of analyzers, you need to be able to say
//what analyzer created a node. This can be done with .sysid,
//or you can represent it like this. This allows you to have
//multiple authors.
codegen u64 cg_uast_coord_author = (0xf<<(64-4)) | 2;
//LOGICAL OPS
codegen u64 cg_uast_coord_implies = (0xf<<(64-4)) | 3;
codegen u64 cg_uast_coord_impliesnot = (0xf<<(64-4)) | 4;
//Common AST Node Types
codegen u64 cg_uast_coord_expr_node = (0xf<<(64-4)) | 5;
codegen u64 cg_uast_coord_stmt_node = (0xf<<(64-4)) | 6;
codegen u64 cg_uast_coord_scope_node = (0xf<<(64-4)) | 7;
codegen u64 cg_uast_coord_symdecl_node = (0xf<<(64-4)) | 8;
codegen u64 cg_uast_coord_typedecl_node = (0xf<<(64-4)) | 9;
codegen u64 cg_uast_coord_root_node = (0xf<<(64-4)) | 10;

/*
    RDPARSER RULE TEMPLATES
    
    the following are assumed true:
    
    1. you have a rule called "err" and a string member variable called "errtext"
    2. you have a member variable called "uast" which is a cg_uast
    3. Whatever you want the parsed node parented to is on top
        of the uast's pstack.
    4. there is a rule called `err_on_null` that emits an error if `tok` is null.
    
    TEMPLATE 1: LINEAR SEQUENCE
    
    @linseq[
        myRuleName
        [IDENT] "{" stmts "}" : (testbench_block)
    ]
    A linear sequence may have one "capture"- i.e. a single element
    of the sequence which is dupe'd in the node's udata as a `strll*`.
    
    
    TEMPLATE 2: BINOP
    @binop[
        mybinop left
        rule1 "*" rule2
    ]
*/

fn codegen cgrdparsehook_linseq(cgstrll* in, cg_rd_parser_spec spec)->cgstrll*:
    //
    cgstrll* iwalker;
    cgstrll* in_orig = in;
    iwalker = in;
    i64 capture_element = -1;
    u64 nelems = 0;
    u64 nonode = 0;
    u64 noparenting = 0;
    if(in == 0)
        @pprint[
            /   "cgrdparsehook_linseq ERROR!"
            /   "There is nothing in the body of this linseq command!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1);
    end
    if(in.d != CG_TOK_IDENT)
        @pprint[
            /   "cgrdparsehook_linseq ERROR!"
            /   "Missing identifier for rule name!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Filename is:"
            /   (iwalker.filename)
            /   "Linenum is:"
            /int(iwalker.linenum)
            /   "Colnum is:"
            /int(iwalker.colnum)
        ]
        __builtin_exit(1);
    end
    @cg_bldr_inittok [in:dupe()]
    in = in.right;
    :modifier_loop
        if(in != 0 && in.d == CG_TOK_IDENT && in.text streq "nonode")
            nonode = 1;
            in = in.right;
            goto modifier_loop
        end
    @cg_bldr_pushqtok "["
    /*
        Create a node to represent ourselves...
    */
    if(!nonode)
        @cg_bldr_pushqtok "cg_uastnode"
        @cg_bldr_pushqtok "me"
        for(iwalker = in, iwalker != 0, iwalker = iwalker.right)
            if(iwalker.d == CG_TOK_OPERATOR)
                if(iwalker.text streq ":")
                    iwalker = iwalker.right;
                    //iwalker:debug_print();
                    if(iwalker == 0 || iwalker.d != CG_TOK_OPAREN)
                        @pprint[
                            /   "cgrdparsehook_linseq ERROR!"
                            /   "The syntax of linseq requires a colon followed immediately by an opening parentheses,"
                            /   "which provides an expression evaluating to a u64 which is the UAST coordinate"
                            /   "Of the node type parsed."
                            /   "It must be the entirety of the block after the opening parentheses..."
                        ]
                        __builtin_exit(1);
                    end
                    break
                end
            end
        end

        @cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "me"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "coord"
        @cg_bldr_pushqtok "="
        if(iwalker != 0)
            @cg_bldr_pushtok [iwalker.dupell()]
            @cg_bldr_rwalk_skip ;
        else //it was eating the else!
            @cg_bldr_pushqtok "0"
        end
    end
    //retval:debug_print();

    //@cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "u64"
        @cg_bldr_pushqtok "nid"
    if(!nonode)
        @cg_bldr_pushqtok "="
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "uast"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "push_node"
        @cg_bldr_pushqtok "("
        @cg_bldr_pushqtok "me"
        @cg_bldr_pushqtok ")"
        @cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "uast"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "stackpush"
        @cg_bldr_pushqtok "("
        @cg_bldr_pushqtok "nid"
        @cg_bldr_pushqtok ")"
    else
        @cg_bldr_pushqtok "="
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "uast"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "pstack"
        @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "stackptr"
            @cg_bldr_pushqtok "-"
            @cg_bldr_pushqtok "1"
        @cg_bldr_pushqtok "]"
    end
    @cg_bldr_pushqtok ";"
    //create a link...

    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "cid" //for future use...
    @cg_bldr_pushqtok ";"

    //begin parsing rules...
    for(iwalker = in, iwalker != 0, iwalker = iwalker.right)
        //Don't accidentally walk into the coordinate value section.
        if(iwalker.d == CG_TOK_OPERATOR && iwalker.text streq ":")
            break
        end
        @cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "do"
        @cg_bldr_pushqtok "err_on_null"
        @cg_bldr_pushqtok ";"
        if(iwalker.d == CG_TOK_OBRACK)
            if(capture_element != -1)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Cannot have multiple captures in linseq!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            iwalker = iwalker.right;
            if(iwalker == 0)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Unmatched brackets!"
                    /   "Prematurely reached end of sequence."
                    /   "Should be impossible!!!!"
                    /   "Language name is:"
                    /   (spec.name.s)
                ]
                __builtin_exit(1);
            end
            if(iwalker.d != CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Missing identifier inside of Capture!"
                    /   "Valid captures are [IDENT], [STRING], [INT], [FLOAT], [NUM]"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            /*
                TODO: Write code to actually perform the capture...
            */
            capture_element = nelems;
            if(iwalker.text streq "IDENT")
                //ensure that this is an identifier...
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_IDENT"
                    @cg_bldr_pushqtok ")"
                        @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_KEYWORD"
                    @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected IDENTIFIER or KEYWORD!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "STRING")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_STRING"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected STRING!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"            
            elif(iwalker.text streq "NOT_STRING")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_STRING"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected NOT STRING!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"            
                
            elif(iwalker.text streq "UNK")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_UNKNOWN"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected an UNKNOWN! (That might sound confusing...)\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"                
            elif(iwalker.text streq "OP")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_OPERATOR"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected an OPERATOR!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "OP_OR_UNK")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_OPERATOR"
                    @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_UNKNOWN"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected an OPERATOR or UNKNOWN!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "SYM")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_OPERATOR"
                    @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_UNKNOWN"
                    @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_COMMA"
                    @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_MACRO_OP"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected a SYMBOL\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "INT")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected INTEGER LITERAL!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "FLOAT")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected FLOAT LITERAL!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "NUM")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                    @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected NUMBER LITERAL!\"";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "ANY")
                //We don't need to do anything!
            else
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Invalid identifier inside of Capture!"
                    /   "Valid captures are [IDENT], [STRING], [INT], [FLOAT], [NUM]"
                    /   "and some others."
                    /   "You may not capture a literal token."
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "nodes"
            @cg_bldr_pushqtok "["
                @cg_bldr_pushqtok "nid"
            @cg_bldr_pushqtok "]"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "udata"
            @cg_bldr_pushqtok "="
            @cg_bldr_pushqtok "cast"
            @cg_bldr_pushqtok "("
            @cg_bldr_pushqtok "u8"
            @cg_bldr_pushqtok "*"
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok "tok"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "dupe"
            @cg_bldr_pushqtok "("
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ";"
            @cg_bldr_pushqtok "eat" //consume the token!

            iwalker = iwalker.right;
            if(iwalker == 0)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Unmatched brackets!"
                    /   "Prematurely reached end of sequence."
                    /   "Should be impossible!!!!"
                    /   "Language name is:"
                    /   (spec.name.s)
                ]
                __builtin_exit(1);
            end
            if(iwalker.d != CG_TOK_CBRACK)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Missing closing square bracket!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            nelems++

            continue
        end //eof capture...
        if(iwalker.d == CG_TOK_STRING)
            //A literal token is to be matched...
            @cg_bldr_pushqtok "match"
            @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "["
                @cg_bldr_pushtok [iwalker:dupe()]
            @cg_bldr_pushqtok "]"
                /*
                    TODO: put code here to handle matching this token...
                */
            @cg_bldr_pushqtok "eat" //just eat it lol....

            @cg_bldr_pushqtok "else"
                //TODO: put code here to handle not finding this thing...
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "errtext"
                @cg_bldr_pushqtok "="
                /*
                    Craft an error message...
                */
                if(1)
                    cgstr errtext
                    cgstr tmp
                    errtext.fromstr("\"Language ");
                    tmp.s = spec.name.s;
                    errtext.add(tmp);
                    tmp.s = " Parse Error! Expected: ";
                    errtext.add(tmp);
                    tmp.s = iwalker.text;
                    errtext.add(tmp);
                    tmp.s = " But did not find it!\"";
                    errtext.add(tmp);
                    @cg_bldr_pushqtok [errtext.s]
                    errtext.free();
                end
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "go"
                @cg_bldr_pushqtok "err"
            @cg_bldr_pushqtok "]"
            
        elif(iwalker.d == CG_TOK_IDENT)
            if(
                iwalker.text streq "IDENT" ||
                iwalker.text streq "STRING" ||
                iwalker.text streq "NOT_STRING" ||
                iwalker.text streq "INT" ||
                iwalker.text streq "FLOAT" ||
                iwalker.text streq "ANY" ||
                iwalker.text streq "OP" ||
                iwalker.text streq "OP_OR_UNK" ||
                iwalker.text streq "UNK" ||
                iwalker.text streq "SYM" ||
                iwalker.text streq "NUM"
            )
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "You may not have this:"
                    /   (iwalker.text)
                    /   "Unless it is being captured!"
                    /   "That means it must be written inside of square brackets!"
                ]
                __builtin_exit(1);
            end
            //this is a rule...
            u64 rule_eval_mode = 0;
            //check for the presence of the ^ which indicates that this rule will leave itself on
            //the stack, for parenting onto the current node.
            //if we have `nonode` set we still do this...
            if(iwalker.right != 0 && iwalker.right.d == CG_TOK_OPERATOR && iwalker.right.text streq "^")
                rule_eval_mode = 1;
            end
            
            //mode 0
            //do the rule...
            @cg_bldr_pushqtok "do"
            @cg_bldr_pushtok [iwalker:dupe()]
            iwalker = iwalker.right;

            if(rule_eval_mode)
                //the stack _has_ changed by exactly one, pop it off!
                @cg_bldr_pushqtok "cid"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "stackpop"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                
                //parent it to ourselves...
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "nid"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "cid"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
            end
        //eof CG_TOK_IDENT
        else
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "Invalid sequence item!"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Filename is:"
                /   (iwalker.filename)
                /   "Linenum is:"
                /int(iwalker.linenum)
                /   "Colnum is:"
                /int(iwalker.colnum)
            ]
            __builtin_exit(1);
        end
        /*
            Does anything need to go here?
        */
        nelems++
        continue
    end
    if(nelems == 0)
        @pprint[
            /   "cgrdparsehook_linseq ERROR!"
            /   "Empty linseq!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1)
    end
    if(iwalker != 0 && iwalker.d == CG_TOK_OPERATOR && iwalker.text streq ":")
        //perform a validation of the expression after it.
        //nonode mode doesnt allow this...
        if(nonode)
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "You may not have a coordinate value section for a 'nonode' linseq!"
                /   "Language name is:"
                /   (spec.name.s)
            ]
            __builtin_exit(1)
        end
        iwalker = iwalker.right;
        if(iwalker.d != CG_TOK_OPAREN)
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "Expression evaluating to coordinate does not begin with opening parenthesis!"
                /   "Language name is:"
                /   (spec.name.s)
            ]
            __builtin_exit(1)
        end
        while(iwalker.right != 0) iwalker = iwalker.right end
        if(iwalker.d != CG_TOK_CPAREN)
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "Expression evaluating to coordinate does not end with a closing parenthesis!"
                /   "Language name is:"
                /   (spec.name.s)
            ]
            __builtin_exit(1)
        end
    end
    @cg_bldr_pushqtok "]"
    in_orig:freelist();
    /*
    @pprint[/bar]
    retval:debug_print();
    @pprint[/bar]
    */
    return retval;
end

/*parse single-token binary operators*/
fn codegen cgrdparsehook_binop(cgstrll* in, cg_rd_parser_spec spec)->cgstrll*:
    //
    cgstrll* iwalker;
    cgstrll* in_orig = in;
    cgstrll* rightrulename = 0;
    iwalker = in;
    i64 has_capture_element = 0;
    u64 nelems = 0;
    u64 is_left = 0;
    u64 is_mustcomplete =0;
    u64 noparenting = 0;
    u64 n_operators = 0;
    u64 noright = 0;
    if(in == 0)
        @pprint[
            /   "cgrdparsehook_binop ERROR!"
            /   "There is nothing in the body of this linseq command!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1);
    end
    if(in.d != CG_TOK_IDENT)
        @pprint[
            /   "cgrdparsehook_binop ERROR!"
            /   "Missing identifier for rule name!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Filename is:"
            /   (iwalker.filename)
            /   "Linenum is:"
            /int(iwalker.linenum)
            /   "Colnum is:"
            /int(iwalker.colnum)
        ]
        __builtin_exit(1);
    end
    @cg_bldr_inittok [in:dupe()]
    @cg_bldr_pushqtok "["
    @cg_bldr_pushqtok "cg_uastnode"
    @cg_bldr_pushqtok "me"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "a"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "b"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "c"
    ;
    in = in.right; //in is now pointing at a modifier, or the name of the lefthand rule...

    //modifiers...
    :checkin_stuff
        if(
            in != 0 &&
            in.d == CG_TOK_IDENT &&
            in.text streq "leftassoc"
        )
            is_left = 1;
            in = in.right; //in is now pointing 
            goto checkin_stuff
        end
        if(
            in != 0 &&
            in.d == CG_TOK_IDENT &&
            in.text streq "mustcomplete"
        )
            is_mustcomplete = 1;
            in = in.right; //in is now pointing 
            goto checkin_stuff
        end
    u64 walky_talky = 0; //what part of the binop expression spec are we parsing?
    //preprocessing loop...
    for(iwalker = in, iwalker != 0, iwalker = iwalker.right)
        walky_talky++;
        if(walky_talky == 1)
            if(iwalker.d != CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_binop ERROR!"
                    /   "Missing identifier for lhs!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            continue
        elif(walky_talky == 2)
            if(iwalker.d == CG_TOK_STRING)
                //the usual case...
                n_operators++
                if(
                    iwalker.right != 0 &&
                    (iwalker.right.d == CG_TOK_OBRACK ||
                    iwalker.right.d == CG_TOK_STRING)
                )
                    //an operator follows...
                    walky_talky--
                end
                continue
            elif(iwalker.d == CG_TOK_OBRACK)
                //A capture...
                has_capture_element = 1;
                iwalker = iwalker.right;
                if(iwalker == 0 || iwalker.d != CG_TOK_IDENT)
                    @pprint[
                        /   "cgrdparsehook_binop ERROR!"
                        /   "Expected identifier inside of brackets."
                        /   "my_left_rule [IDENT] my_right_rule"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Filename is:"
                        /   (iwalker.filename)
                        /   "Linenum is:"
                        /int(iwalker.linenum)
                        /   "Colnum is:"
                        /int(iwalker.colnum)
                    ]
                    __builtin_exit(1);
                end
                iwalker = iwalker.right;
                if(iwalker == 0 || iwalker.d != CG_TOK_CBRACK)
                    @pprint[
                        /   "cgrdparsehook_binop ERROR!"
                        /   "Expected closing square bracket."
                        /   "my_left_rule [IDENT] my_right_rule"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Filename is:"
                        /   (iwalker.filename)
                        /   "Linenum is:"
                        /int(iwalker.linenum)
                        /   "Colnum is:"
                        /int(iwalker.colnum)
                    ]
                    __builtin_exit(1);
                end
                n_operators++
                if(
                    iwalker.right != 0 &&
                    (iwalker.right.d == CG_TOK_OBRACK ||
                    iwalker.right.d == CG_TOK_STRING)
                )
                    //an operator follows...
                    walky_talky--
                end
                continue
            end
            if(iwalker.d == CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_binop ERROR!"
                    /   "Found identifier in incorrect place?"
                    /   "If you want an identifier operator, please use"
                    /   "the following..."
                    /   "my_left_rule [IDENT] my_right_rule"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            @pprint[
                /   "cgrdparsehook_binop ERROR!"
                /   "Unknown... something... in the second spot of binop rule."
                /   "If you want an identifier operator, please use"
                /   "the following..."
                /   "my_left_rule [IDENT] my_right_rule"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Filename is:"
                /   (iwalker.filename)
                /   "Linenum is:"
                /int(iwalker.linenum)
                /   "Colnum is:"
                /int(iwalker.colnum)
            ]
            __builtin_exit(1);
        elif(walky_talky == 3)
            if(iwalker.d == CG_TOK_OPERATOR &&
                iwalker.text != 0 &&
                iwalker.text streq ":"
            )
                //there is no righthand rule... so this is
                //a fancy postfix operator rule...
                iwalker = iwalker.right;
                noright = 1;
                break
            end
            if(iwalker.d != CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_binop ERROR!"
                    /   "Missing identifier for rhs!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            rightrulename = iwalker; //saved for later!
            continue
        elif(walky_talky == 4)
            if(iwalker.d != CG_TOK_OPERATOR ||
                iwalker.text == 0 ||
                iwalker.text strneq ":"
            )
                 @pprint[
                    /   "cgrdparsehook_binop ERROR!"
                    /   "Expected :"
                    /   "The syntax of binop requires a colon followed immediately by an opening parentheses,"
                    /   "which provides an expression evaluating to a u64 which is the UAST coordinate"
                    /   "Of the node type parsed."
                    /   "It must be the entirety of the block after the opening parentheses..."
                ]
                __builtin_exit(1);
            end
            //It is indeed the colon operator!
            iwalker = iwalker.right
            break
        elif(walky_talky > 4)
            @pprint[
                /   "cgrdparsehook_binop ERROR!"
                /   "This rule has too much in it!"
            ]
            __builtin_exit(1);            
        end
        if(iwalker.d == CG_TOK_OPERATOR)
            if(iwalker.text streq ":")
                iwalker = iwalker.right
                if(iwalker == 0 || iwalker.d != CG_TOK_OPAREN)
                    @pprint[
                        /   "cgrdparsehook_binop ERROR!"
                        /   "The syntax of binop requires a colon followed immediately by an opening parentheses,"
                        /   "which provides an expression evaluating to a u64 which is the UAST coordinate"
                        /   "Of the node type parsed."
                        /   "It must be the entirety of the block after the opening parentheses..."
                    ]
                    __builtin_exit(1);
                end
                break
            end
        end
    end

    @cg_bldr_pushqtok ";"
    if(walky_talky < 3)
        noright = 1;
    end
    if(walky_talky < 2)
        @pprint[
            /       "cgrdparsehook_binop ERROR!"
            /       "Some part of the specification was missing...."
            /       "I only got to the part with number..."
            /int    (walky_talky)
            /       "where 0 = found nothing, 1 = found lhs, 2 = found operator(s),"
            /       "3 = found rhs, and 4 = found colon section."
        ]
        __builtin_exit(1);
    end
    if(n_operators < 1)
        @pprint[
            /       "cgrdparsehook_binop __INTERNAL__ ERROR!"
            /       "No operators were specified!"
            /       "This should be IMPOSSIBLE! Here is walky_talky:"
            /int    (walky_talky)
            /       "where 0 = found nothing, 1 = found lhs, 2 = found operator(s),"
            /       "3 = found rhs, and 4 = found colon section."
            /       "CALL YOUR SYSTEM ADMINISTRATOR!!!!"
        ]
    end


    if(iwalker != 0)
        @cg_bldr_pushqtok "me"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "coord"
        @cg_bldr_pushqtok "="
        @cg_bldr_pushtok [iwalker.dupell()]
        @cg_bldr_rwalk_skip ;
    end
    @cg_bldr_pushqtok ";"
    //do the lefthand rule, pointed at by in...
    @cg_bldr_pushqtok "do"
    @cg_bldr_pushtok [in:dupe()]
    in = in.right; //now advancing to the first operator...
    //retrieve the value from the stack...
    @cg_bldr_pushqtok "a"
    @cg_bldr_pushqtok "="
    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "stackpop"
    @cg_bldr_pushqtok "("
    @cg_bldr_pushqtok ")"
    @cg_bldr_pushqtok ";"

    if(is_left)
        @cg_bldr_pushqtok "while"
        @cg_bldr_pushqtok "("
        @cg_bldr_pushqtok "1"
        @cg_bldr_pushqtok ")"
    end
    u64 i
    for(i = 0; i < n_operators; i++)
        @cg_bldr_pushqtok "do"
        @cg_bldr_pushqtok "err_on_null"
        //handle every operator, which is of the form
        //stringlit | [IDENT] | [STRING] | [INT] | [FLOAT] | [NUM]
        //in every case, the thing is captured...
        //if we are left associative, we consecutively build AST nodes,
        //but if not, we simply 
        if(in.d == CG_TOK_STRING)
            //we do a simple match
            @cg_bldr_pushqtok "match"
            @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "["
                @cg_bldr_pushtok [in:dupe()]
                in = in.right;
            @cg_bldr_pushqtok "]"
                //here, we insert some code...
                @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "udata"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "cast"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok "u8"
                @cg_bldr_pushqtok "*"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok "tok"
                @cg_bldr_pushqtok ":"
                @cg_bldr_pushqtok "dupe"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "eat" //consume the operator token...
                
                @cg_bldr_pushqtok "c"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "push_node"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "do"
                    @cg_bldr_pushtok [rightrulename:dupe()]
                    @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok "="
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "stackpop"
                    @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "c"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "add_link"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "c"
                        @cg_bldr_pushqtok ","
                        @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "c"
                if(is_left)
                    @cg_bldr_pushqtok "continue"
                else
                    @cg_bldr_pushqtok "goto"
                    @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
                end
            @cg_bldr_pushqtok "]"
            continue
        elif(in.d == CG_TOK_OBRACK)
            //A capture!
            in = in.right;
            //guaranteed to be an ident... we checked...
            @cg_bldr_pushqtok "if"
            @cg_bldr_pushqtok "("
                
                if(in.text streq "IDENT")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_IDENT"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_KEYWORD"
                elif(in.text streq "INT")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                elif(in.text streq "FLOAT")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                elif(in.text streq "NUM")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                elif(in.text streq "STRING")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_STRING"
                else
                    @pprint[
                        /   "cgrdparsehook_binop ERROR!"
                        /   "Unknown capture rule..."
                        /   (in.text)
                    ]
                end
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "udata"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "cast"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok "u8"
                @cg_bldr_pushqtok "*"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok "tok"
                @cg_bldr_pushqtok ":"
                @cg_bldr_pushqtok "dupe"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "eat"
                //now do our operator stuff...
                @cg_bldr_pushqtok "c"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "push_node"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "do"
                    @cg_bldr_pushtok [rightrulename:dupe()]
                    @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok "="
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "stackpop"
                    @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "c"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "add_link"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "c"
                        @cg_bldr_pushqtok ","
                        @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "c"
                if(is_left)
                    @cg_bldr_pushqtok "continue"
                else
                    @cg_bldr_pushqtok "goto"
                    @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
                end

            @cg_bldr_pushqtok "end"
            
            
            in = in.right; //this moves us to the CBRACK...
            continue //which will be consumed by the iteration...
        end
        @pprint[
            /   "cgrdparsehook_binop __INTERNAL__ ERROR!"
            /   "Somehow, the program has reached an invalid state."
            /   "Call your system administrator!"
        ]
        __builtin_exit(1);
    end //eof giant for
    if(is_mustcomplete)
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "errtext"
        @cg_bldr_pushqtok "="
        if(1)
            cgstr errtext
            cgstr tmp
            errtext.fromstr("\"Language ");
            tmp.s = spec.name.s;
            errtext.add(tmp);
            tmp.s = " Parse Error! Expected an operator!\"";
            errtext.add(tmp);
            @cg_bldr_pushqtok [errtext.s]
            errtext.free();
        end
        @cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "go"
        @cg_bldr_pushqtok "err"
    elif(is_left)
        @cg_bldr_pushqtok "break"
    else
        @cg_bldr_pushqtok "goto"
        @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
    end
    
    if(is_left)
        @cg_bldr_pushqtok "end"
    else
        @cg_bldr_pushqtok ":"
        @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
    end
    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "stackpush"
    @cg_bldr_pushqtok "("
    @cg_bldr_pushqtok "a"
    @cg_bldr_pushqtok ")"
    @cg_bldr_pushqtok ";"
    @cg_bldr_pushqtok "finish"
    
    @cg_bldr_pushqtok "]"
    in_orig:freelist();
    return retval;
end







/*Parse a _single_ binary operator comprised of multiple tokens...*/
fn codegen cgrdparsehook_binop_linseq(cgstrll* in, cg_rd_parser_spec spec)->cgstrll*:
    //
    cgstrll* iwalker;
    cgstrll* in_orig = in;
    cgstrll* rightrulename = 0;
    cgstrll* start_operator = 0;
    iwalker = in;
    i64 has_capture_element = 0;
    u64 nelems = 0;
    u64 is_left = 0;
    u64 is_mustcomplete =0;
    u64 which_element_is_the_capture = 0;
    u64 noright = 0;
    u64 n_operators = 0; //This now counts the number of tokens in the operator portion...
    if(in == 0)
        @pprint[
            /   "cgrdparsehook_binop_linseq ERROR!"
            /   "There is nothing in the body of this linseq command!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1);
    end
    if(in.d != CG_TOK_IDENT)
        @pprint[
            /   "cgrdparsehook_binop_linseq ERROR!"
            /   "Missing identifier for rule name!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Filename is:"
            /   (iwalker.filename)
            /   "Linenum is:"
            /int(iwalker.linenum)
            /   "Colnum is:"
            /int(iwalker.colnum)
        ]
        __builtin_exit(1);
    end
    @cg_bldr_inittok [in:dupe()]
    @cg_bldr_pushqtok "["
    @cg_bldr_pushqtok "cg_uastnode"
    @cg_bldr_pushqtok "me"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "a"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "b"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "c"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "completed"
    @cg_bldr_pushqtok "="
    @cg_bldr_pushqtok "0"
    @cg_bldr_pushqtok ";"
    @cg_bldr_pushqtok "cgstrll"
    @cg_bldr_pushqtok "*"
    @cg_bldr_pushqtok "tok_fake"
    ;
    in = in.right; //in is now pointing at a modifier, or the name of the lefthand rule...

    //modifiers...
    :checkin_stuff
        if(
            in != 0 &&
            in.d == CG_TOK_IDENT &&
            in.text streq "leftassoc"
        )
            is_left = 1;
            in = in.right; //in is now pointing 
            goto checkin_stuff
        end
        if(
            in != 0 &&
            in.d == CG_TOK_IDENT &&
            in.text streq "mustcomplete"
        )
            is_mustcomplete = 1;
            in = in.right; //in is now pointing 
            goto checkin_stuff
        end
    u64 walky_talky = 0; //what part of the binop expression spec are we parsing?
    //preprocessing loop...
    for(iwalker = in, iwalker != 0, iwalker = iwalker.right)
        walky_talky++;
        if(walky_talky == 1)
            if(iwalker.d != CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_binop_linseq ERROR!"
                    /   "Missing identifier for lhs!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            continue
        elif(walky_talky == 2)
            if(start_operator == 0)
                start_operator = iwalker;
            end
            if(iwalker.d == CG_TOK_STRING)
                //the usual case...
                n_operators++
                if(
                    iwalker.right != 0 &&
                    (iwalker.right.d == CG_TOK_OBRACK ||
                    iwalker.right.d == CG_TOK_STRING)
                )
                    //an operator follows...
                    walky_talky--
                end
                continue
            elif(iwalker.d == CG_TOK_OBRACK)
                //A capture...
                if(has_capture_element)
                    @pprint[
                        /   "cgrdparsehook_binop_linseq ERROR!"
                        /   "Cannot have two capture elements!"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Filename is:"
                        /   (iwalker.filename)
                        /   "Linenum is:"
                        /int(iwalker.linenum)
                        /   "Colnum is:"
                        /int(iwalker.colnum)
                    ]
                    __builtin_exit(1);
                end
                has_capture_element = 1;
                iwalker = iwalker.right;
                if(iwalker == 0 || iwalker.d != CG_TOK_IDENT)
                    @pprint[
                        /   "cgrdparsehook_binop_linseq ERROR!"
                        /   "Expected identifier inside of brackets."
                        /   "my_left_rule [HUH] my_right_rule"
                        /   "Where HUH can be one of..."
                        /   "IDENT INT FLOAT STRING NUM ANY"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Filename is:"
                        /   (iwalker.filename)
                        /   "Linenum is:"
                        /int(iwalker.linenum)
                        /   "Colnum is:"
                        /int(iwalker.colnum)
                    ]
                    __builtin_exit(1);
                end
                iwalker = iwalker.right;
                if(iwalker == 0 || iwalker.d != CG_TOK_CBRACK)
                    @pprint[
                        /   "cgrdparsehook_binop_linseq ERROR!"
                        /   "Expected closing square bracket."
                        /   "my_left_rule [IDENT] my_right_rule"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Filename is:"
                        /   (iwalker.filename)
                        /   "Linenum is:"
                        /int(iwalker.linenum)
                        /   "Colnum is:"
                        /int(iwalker.colnum)
                    ]
                    __builtin_exit(1);
                end
                which_element_is_the_capture = n_operators;
                n_operators++
                if(
                    iwalker.right != 0 &&
                    (iwalker.right.d == CG_TOK_OBRACK ||
                    iwalker.right.d == CG_TOK_STRING)
                )
                    //an operator follows...
                    walky_talky--
                end
                continue
            end
            if(iwalker.d == CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_binop_linseq ERROR!"
                    /   "Found identifier in incorrect place?"
                    /   "If you want an identifier operator, please use"
                    /   "the following..."
                    /   "my_left_rule [IDENT] my_right_rule"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            @pprint[
                /   "cgrdparsehook_binop_linseq ERROR!"
                /   "Unknown... something... in the second spot of binop rule."
                /   "If you want an identifier operator, please use"
                /   "the following..."
                /   "my_left_rule [IDENT] my_right_rule"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Filename is:"
                /   (iwalker.filename)
                /   "Linenum is:"
                /int(iwalker.linenum)
                /   "Colnum is:"
                /int(iwalker.colnum)
            ]
            __builtin_exit(1);
        elif(walky_talky == 3)
            if(iwalker.d == CG_TOK_OPERATOR && iwalker.text streq ":")
                //this is the end of the line!
                noright = 1;
                iwalker = iwalker.right;
                break
            end
            if(iwalker.d != CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_binop_linseq ERROR!"
                    /   "Missing identifier for rhs!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            rightrulename = iwalker; //saved for later!
            continue
        elif(walky_talky == 4)
            if(iwalker.d != CG_TOK_OPERATOR ||
                iwalker.text == 0 ||
                iwalker.text strneq ":"
            )
                 @pprint[
                    /   "cgrdparsehook_binop_linseq ERROR!"
                    /   "Expected :"
                    /   "The syntax of binop requires a colon followed immediately by an opening parentheses,"
                    /   "which provides an expression evaluating to a u64 which is the UAST coordinate"
                    /   "Of the node type parsed."
                    /   "It must be the entirety of the block after the opening parentheses..."
                ]
                __builtin_exit(1);
            end
            //It is indeed the colon operator!
            iwalker = iwalker.right
            break
        elif(walky_talky > 4)
            @pprint[
                /   "cgrdparsehook_binop_linseq ERROR!"
                /   "This rule has too much in it!"
            ]
            __builtin_exit(1);            
        end
        if(iwalker.d == CG_TOK_OPERATOR)
            if(iwalker.text streq ":")
                iwalker = iwalker.right
                if(iwalker == 0 || iwalker.d != CG_TOK_OPAREN)
                    @pprint[
                        /   "cgrdparsehook_binop_linseq ERROR!"
                        /   "The syntax of binop requires a colon followed immediately by an opening parentheses,"
                        /   "which provides an expression evaluating to a u64 which is the UAST coordinate"
                        /   "Of the node type parsed."
                        /   "It must be the entirety of the block after the opening parentheses..."
                    ]
                    __builtin_exit(1);
                end
                break
            end
        end
    end

    @cg_bldr_pushqtok ";"
    //this executes if and only if we didn't have
    //a : specification, and no right
    if(walky_talky < 3)
        noright = 1
    end
    if(walky_talky < 2)
        @pprint[
            /       "cgrdparsehook_binop_linseq ERROR!"
            /       "Some part of the specification was missing...."
            /       "I only got to the part with number..."
            /int    (walky_talky)
            /       "where 0 = found nothing, 1 = found lhs, 2 = found operator(s),"
            /       "3 = found rhs, and 4 = found colon section."
        ]
        __builtin_exit(1);
    end
    if(n_operators < 1)
        @pprint[
            /       "cgrdparsehook_binop_linseq __INTERNAL__ ERROR!"
            /       "No operators were specified!"
            /       "This should be IMPOSSIBLE! Here is walky_talky:"
            /int    (walky_talky)
            /       "where 0 = found nothing, 1 = found lhs, 2 = found operator(s),"
            /       "3 = found rhs, and 4 = found colon section."
            /       "CALL YOUR SYSTEM ADMINISTRATOR!!!!"
        ]
    end

    if(iwalker != 0)
        @cg_bldr_pushqtok "me"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "coord"
        @cg_bldr_pushqtok "="
        @cg_bldr_pushtok [iwalker.dupell()]
        @cg_bldr_rwalk_skip ;
    end
    @cg_bldr_pushqtok ";"
    //do the lefthand rule, pointed at by in...
    @cg_bldr_pushqtok "do"
    @cg_bldr_pushtok [in:dupe()]
    in = in.right; //now advancing to the first operator...
    //retrieve the value from the stack...
    @cg_bldr_pushqtok "a"
    @cg_bldr_pushqtok "="
    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "stackpop"
    @cg_bldr_pushqtok "("
    @cg_bldr_pushqtok ")"
    @cg_bldr_pushqtok ";"
    //in case we fail to parse the operator,
    //we need to save `tok`...
    @cg_bldr_pushqtok "tok_fake"
    @cg_bldr_pushqtok "="
    @cg_bldr_pushqtok "tok"
    @cg_bldr_pushqtok ";"


    if(is_left)
        @cg_bldr_pushqtok "while"
        @cg_bldr_pushqtok "("
        @cg_bldr_pushqtok "1"
        @cg_bldr_pushqtok ")"
    end
    u64 i
    for(i = 0; i < n_operators; i++)
        @cg_bldr_pushqtok "do"
        @cg_bldr_pushqtok "err_on_null"
        //handle every operator, which is of the form
        //stringlit | [IDENT] | [STRING] | [INT] | [FLOAT] | [NUM]
        //in every case, the thing is captured...
        //if we are left associative, we consecutively build AST nodes,
        //but if not, we simply 
        if(in.d == CG_TOK_STRING)
            //we do a simple match
            @cg_bldr_pushqtok "match"
            @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "["
                @cg_bldr_pushtok [in:dupe()]
                in = in.right;
            @cg_bldr_pushqtok "]"
            //here, we insert some code...
            if(!has_capture_element && (i == n_operators-1))
                @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "udata"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "cast"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok "u8"
                @cg_bldr_pushqtok "*"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok "tok"
                @cg_bldr_pushqtok ":"
                @cg_bldr_pushqtok "dupe"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"

            end
                @cg_bldr_pushqtok "eat" //consume the operator token...
            //
            if(i == n_operators-1)
                @cg_bldr_pushqtok "completed"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "1"
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "c"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "push_node"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                @cg_bldr_tokmanip_push_strings[
                    //set me.udata to null....
                    me.udata = cast(u8*)0;
                ]
                if(!noright)
                    @cg_bldr_pushqtok "do"
                    @cg_bldr_pushtok [rightrulename:dupe()]
                end
                @cg_bldr_pushqtok "tok_fake"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "tok"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok "="
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "stackpop"
                    @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "c"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "add_link"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "c"
                        @cg_bldr_pushqtok ","
                        @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "c"
                if(is_left)
                    @cg_bldr_pushqtok "continue"
                else
                    @cg_bldr_pushqtok "goto"
                    @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
                end
            end
            

            continue
        elif(in.d == CG_TOK_OBRACK)
            //A capture!
            in = in.right;
            //guaranteed to be an ident... we checked...
            @cg_bldr_pushqtok "if"
            @cg_bldr_pushqtok "("
                
                if(in.text streq "IDENT")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_IDENT"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_KEYWORD"
                elif(in.text streq "INT")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                elif(in.text streq "FLOAT")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                elif(in.text streq "NUM")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                elif(in.text streq "STRING")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_STRING"
                elif(in.text streq "NOT_STRING")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_STRING"
                elif(in.text streq "OP")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_OPERATOR"
                elif(in.text streq "UNK")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_UNKNOWN"
                elif(in.text streq "OP_OR_UNK")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_OPERATOR"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_UNKNOWN"
                elif(in.text streq "SYM")
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_OPERATOR"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_UNKNOWN"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_COMMA"
                    @cg_bldr_pushqtok "||"
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "=="
                    @cg_bldr_pushqtok "CG_TOK_MACRO_OP"
                elif(in.text streq "ANY")
                    @cg_bldr_pushqtok "1" //accept literally any token...
                else
                    @pprint[
                        /   "cgrdparsehook_binop_linseq ERROR!"
                        /   "Unknown capture rule..."
                        /   "The valid rules are:"
                        /   "IDENT INT FLOAT NUM STRING NOT_STRING OP(==CG_TOK_OPERATOR) UNK(==CG_TOK_UNKNOWN) OP_OR_UNK"
                        /   "SYM(==CG_TOK_OPERATOR or CG_TOK_UNKNOWN or CG_TOK_COMMA)"
                        /   (in.text)
                    ]
                end
                @cg_bldr_pushqtok ")"
            //the capture element always captures...
                @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "udata"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "cast"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok "u8"
                @cg_bldr_pushqtok "*"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok "tok"
                @cg_bldr_pushqtok ":"
                @cg_bldr_pushqtok "dupe"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "eat"
                //now do our operator stuff...
            if(i == n_operators-1)
                @cg_bldr_pushqtok "completed"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "1"
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "c"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "push_node"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "me"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                @cg_bldr_tokmanip_push_strings[
                    //set me.udata to null....
                    me.udata = cast(u8*)0;
                ]

                if(!noright)
                    @cg_bldr_pushqtok "do"
                    @cg_bldr_pushtok [rightrulename:dupe()]
                end
                @cg_bldr_pushqtok "tok_fake"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "tok"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok "="
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "stackpop"
                    @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "c"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                if(!noright)
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "add_link"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "c"
                        @cg_bldr_pushqtok ","
                        @cg_bldr_pushqtok "b"
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok ";"
                end
                @cg_bldr_pushqtok "a"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "c"
                if(is_left)
                    @cg_bldr_pushqtok "continue"
                else
                    @cg_bldr_pushqtok "goto"
                    @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
                end
            end
            
            in = in.right; //this moves us to the CBRACK...
            continue //which will be consumed by the iteration...
        end
        @pprint[
            /   "cgrdparsehook_binop_linseq __INTERNAL__ ERROR!"
            /   "Somehow, the program has reached an invalid state."
            /   "Call your system administrator!"
        ]
        __builtin_exit(1);
    end //eof giant for
    /*
        We must now go through every operator in reverse
        to write out their ends.
    */
    which_element_is_the_capture++; //0 is now 1....
    for(i = n_operators; i ; i--)
        if(
            has_capture_element && 
            (i == which_element_is_the_capture)
        )
            @cg_bldr_pushqtok "end"
        else
            @cg_bldr_pushqtok "]"
        end
    end
    
    
    if(is_mustcomplete)
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "errtext"
        @cg_bldr_pushqtok "="
        if(1)
            cgstr errtext
            cgstr tmp
            errtext.fromstr("\"Language ");
            tmp.s = spec.name.s;
            errtext.add(tmp);
            tmp.s = " Parse Error! Expected an operator!\"";
            errtext.add(tmp);
            @cg_bldr_pushqtok [errtext.s]
            errtext.free();
        end
        @cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "go"
        @cg_bldr_pushqtok "err"
    elif(is_left)
        @cg_bldr_pushqtok "break"
    else
        @cg_bldr_pushqtok "goto"
        @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
    end
    
    if(is_left)
        @cg_bldr_pushqtok "end"
    else
        @cg_bldr_pushqtok ":"
        @cg_bldr_pushqtok "__autogenerated_label_binop_skip__"
    end
    @cg_bldr_tokmanip_push_strings[
        /*
            If we did not successfully parse the operator,
            reverse back to just after we parsed the left hand side...
        */
        if(completed == 0)
            cgstrll* ppp
            tok = tok_fake;
            ppp = cast(cgstrll*)me.udata;
            //if me.udata is not null, we have to handle that!
            if(ppp != 0)
                if(ppp.text != 0)
                    __builtin_free(ppp.text);
                end
                __builtin_free((u8*)ppp);
            end
        end
        this.uast.stackpush(a); finish
    ]
    
    @cg_bldr_pushqtok "]"
    in_orig:freelist();
    return retval;
end

/*
    The decision maker! Based on the identity of the current token,
    choose a rule to execute.
    
    It can choose based
    
    @cond[
        crule //name of rule
        //match an identifier with text HOOPLAH
        d[CG_TOK_IDENT]text["HOOPLAH"]? myrule
        //match a non-stringliteral with text what
        d![CG_TOK_STRING]text["what"]? myrule2
        if[some_expression_evaluating_to_int()]? myrule3
        else my_other_rule
        
    ]
*/
fn codegen cgrdparsehook_cond(cgstrll* in, cg_rd_parser_spec spec)->cgstrll*:
    cgstrll* the_name
    cgstrll* in_orig = in;
    if(in == 0 || in.d != CG_TOK_IDENT)
        @pprint[
            /   "cgrdparsehook_cond ERROR!!!!"
            /   "No name?!?!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1);
    end
    the_name = in;
    in = in.right;
    if(in == 0)
        @pprint[
            /   "cgrdparsehook_cond ERROR!!!!"
            /   "Body is EMPTY?!?!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Rule name is:"
            /   (the_name.text)
        ]
        __builtin_exit(1);        
    end
    //begin parsing rules...
    @cg_bldr_inittok [the_name:dupe()]
    @cg_bldr_pushqtok "["
    
    while(1)
        //Parsing a condition......
        u64 indentlevels = 0;
        u64 is_else_clause = 0;
        //reached the end?
        if(in == 0) break end
        //Make sure the user doesn't commit tax fraud....
        if(in.d == CG_TOK_OPERATOR && in.text streq "?")
            //this is not a good situation...
            @pprint[
                /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                /   "You can't have an empty condition."
                /   "If you desire to write a clause which"
                /   "always executes if none of the previous ones"
                /   "have, try using `else myrule`"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Rule name is:"
                /   (the_name.text)
            ]
            __builtin_exit(1);
        end
        //we use this label for handling conditions...
        if(in.d == CG_TOK_KEYWORD && in.text streq "else")
            //This is the else clause!
            in = in.right;
            is_else_clause = 1;
            indentlevels = 0;
            goto rule_doin_part
        end
        :local_looptop
        if(in == 0)
            @pprint[
                /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                /   "Termination during condition evaluation"
                /   "You ended without a '?',"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Rule name is:"
                /   (the_name.text)
            ]
            __builtin_exit(1);
        end
        //consume superfluous commas
        if(in.d == CG_TOK_COMMA)
            in = in.right
            goto local_looptop
        end
        if(in.d == CG_TOK_IDENT && in.text streq "d")
            u64 is_inverted = 0;
            cgstrll* folded_out_arg;
            cgstrll* in_old;
            in_old = in;
            in = in.right;
            if(in == 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Termination after 'd'?"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            if(in.d == CG_TOK_OPERATOR && in.text streq "!")
                //this is an inversion....
                is_inverted = 1;
                in_old = in;
                in = in.right;
                if(in == 0)
                    @pprint[
                        /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                        /   "Termination after 'd!'?"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Rule name is:"
                        /   (the_name.text)
                    ]
                    __builtin_exit(1);
                end
            end
            if(in.d != CG_TOK_OBRACK)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "d/d! requires a square-bracketed expression."
                    /   "d[CG_TOK_IDENT] for instance..."
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);            
            end
            //we know whether it was d or d!
            @cg_bldr_foldout_arg folded_out_arg in
            in_old.right = in; //Keep in_orig valid...
            if(folded_out_arg == 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Contents of d/d! expression are EMPTY!!!!"
                    /   "The square brackets after d/d! may NOT be empty!"
                    /   "You need to put an expression in there!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            //we have to increase indent levels every time...
            indentlevels++;
            //we now have enough to create the if statement...
            //insert do err
            if(is_inverted)
                @cg_bldr_tokmanip_push_strings[
                    do err_on_null
                    if(tok.d != //)
                ]
            else
                @cg_bldr_tokmanip_push_strings[
                    do err_on_null
                    if(tok.d == 
                ]
            end
            @cg_bldr_pushtok [folded_out_arg]
            @cg_bldr_rwalk_skip ;
            @cg_bldr_pushqtok ")"
            
            goto local_looptop
        end //eof if d
        if(in.d == CG_TOK_IDENT && in.text streq "text")
            u64 is_inverted = 0;
            cgstrll* folded_out_arg;
            cgstrll* in_old = in;

            in = in.right;
            if(in == 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Termination after 'text'?"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            if(in.d == CG_TOK_OPERATOR && in.text streq "!")
                //this is an inversion....
                is_inverted = 1;
                in_old = in;
                in = in.right;
                if(in == 0)
                    @pprint[
                        /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                        /   "Termination after 'text!'?"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Rule name is:"
                        /   (the_name.text)
                    ]
                    __builtin_exit(1);
                end
            end
            if(in.d != CG_TOK_OBRACK)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "text/text! requires a square-bracketed expression."
                    /   "text[\"uh\"] for instance..."
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);            
            end
            //we know whether it was d or d!
            @cg_bldr_foldout_arg folded_out_arg in
            in_old.right = in; //keep in_orig valid...
            if(folded_out_arg == 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Contents of text/text! expression are EMPTY!!!!"
                    /   "The square brackets after text/text! may NOT be empty!"
                    /   "You need to put an expression in there!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            //we have to increase indent levels every time...
            indentlevels++;
            //we now have enough to create the if statement...
            if(is_inverted)
                @cg_bldr_tokmanip_push_strings[
                    do err_on_null
                    if(tok.text strneq //)
                ]
            else
                @cg_bldr_tokmanip_push_strings[
                    do err_on_null
                    if(tok.text streq
                ]
            end
            @cg_bldr_pushtok [folded_out_arg]
            @cg_bldr_rwalk_skip ;
            @cg_bldr_pushqtok ")"
            
            goto local_looptop
        end
        if(in.d == CG_TOK_KEYWORD && in.text streq "if")
            u64 is_inverted = 0;
            cgstrll* folded_out_arg;
            cgstrll* in_old = in;

            in = in.right;
            if(in == 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Termination after 'if'?"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            if(in.d == CG_TOK_OPERATOR && in.text streq "!")
                //this is an inversion....
                is_inverted = 1;
                in_old = in;
                in = in.right;
                if(in == 0)
                    @pprint[
                        /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                        /   "Termination after 'if!'?"
                        /   "Language name is:"
                        /   (spec.name.s)
                        /   "Rule name is:"
                        /   (the_name.text)
                    ]
                    __builtin_exit(1);
                end
            end
            if(in.d != CG_TOK_OBRACK)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "if/if! requires a square-bracketed expression."
                    /   "if[2 == (1+1)] for instance..."
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);            
            end
            //we know whether it was d or d!
            @cg_bldr_foldout_arg folded_out_arg in
            in_old.right = in; //keep in_orig valid....
            if(folded_out_arg == 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Contents of if/if! expression are EMPTY!!!!"
                    /   "The square brackets after if/if! may NOT be empty!"
                    /   "You need to put an expression in there!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            //we have to increase indent levels every time...
            indentlevels++;
            //we now have enough to create the if statement...
            if(is_inverted)
                @cg_bldr_tokmanip_push_strings[
                    if(!( //))
                ]
            else
                @cg_bldr_tokmanip_push_strings[
                    if((
                ]
            end
            @cg_bldr_pushtok [folded_out_arg]
            @cg_bldr_rwalk_skip ;
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ")"
            
            goto local_looptop
        end
        //require a question mark...
        if(in.d != CG_TOK_OPERATOR || in.text == 0 || in.text strneq "?")
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Question mark required for conditional...."
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
        end
        //consume it!
        in = in.right;
        :rule_doin_part
        //identifier required...
        if(in == 0 || in.d != CG_TOK_IDENT)
            @pprint[
                /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                /   "Identifier required: Name of rule to execute on recognition..."
                /   "Language name is:"
                /   (spec.name.s)
                /   "Rule name is:"
                /   (the_name.text)
            ]
            __builtin_exit(1);
        end
        @cg_bldr_pushqtok "go"
        @cg_bldr_pushtok [in:dupe()]
        in = in.right; //consume the identifier.
        u64 i
        for(i = 0, i < indentlevels, i++)
            @cg_bldr_pushqtok "end"
        end
        //the condition is complete!!!!
        if(is_else_clause)
            //verify that there is no more text...
            if(in != 0)
                @pprint[
                    /   "cgrdparsehook_cond SYNTAX ERROR!!!!"
                    /   "Superfluous stuff after else clause?"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
            break
        end
    end //eof loop over conditions...
    //conditions are finished...
    
    @cg_bldr_pushqtok "]"
    in_orig:freelist();
    return retval;
end

/*
    Parse a repeated sequence, until some terminating token or condition.
    It does not perform any stack operations.
                     
    "X" will inject a check for the terminating condition at
    that point in the sequence
    @repseq[
        comma_separated_values
        [";"]
        my_expr_rule X "," X
    ]
*/

//helpers so that it isn't a pain to write code...
//this will slow down compiletimes somewhat but... well... that's a problem for
//later me to solve.

@wksht cgrdparsehook_repseq_termcheckcode_pushqtok[
    [
        //assume efficiency
        termination_check_code_rwalker.right = cg_qtok(ARG1);
        termination_check_code_rwalker = termination_check_code_rwalker.right;
    ][
        ARG1
    ]
]

@wksht cgrdparsehook_repseq_termcheckcode_pushtok[
    [
        //assume efficiency
        termination_check_code_rwalker.right = (ARG1);
        termination_check_code_rwalker = termination_check_code_rwalker.right;
    ][
        ARG1
    ]
]

fn codegen cgrdparsehook_repseq(cgstrll* in, cg_rd_parser_spec spec)->cgstrll*:
    cgstrll* termination_check_code = 0;
    cgstrll* termination_check_code_rwalker = 0;
    cgstrll* terminating_conditions_list = 0;
    cgstrll* terminating_conditions_list_walker = 0;
    cgstrll* the_name = 0;
    cgstrll* in_orig = in;
    cgstrll* in_old  = 0;
    u64 had_terminator = 0;
    u64 n_terminating_checks = 0;
    u64 had_trivial_terminator = 0;
    u64 noconsume = 0;
    u64 noparenting = 0;
    u64 make_node = 0;

    
    if(in == 0 || in.d != CG_TOK_IDENT)
        @pprint[
            /   "cgrdparsehook_repseq ERROR!!!!"
            /   "This repseq rule lacks a name!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1);
    end
    the_name = in;
    in_old = in;
    in = in.right;
    :modifiers_top
    if(in != 0 && in.d == CG_TOK_IDENT && in.text streq "noconsume")
        noconsume = 1;
        in_old = in;
        in = in.right;
        goto modifiers_top
    end    
    if(in != 0 && in.d == CG_TOK_IDENT && in.text streq "noparenting")
        noparenting = 1;
        in_old = in;
        in = in.right;
        goto modifiers_top
    end   
    if(in != 0 && in.d == CG_TOK_IDENT && in.text streq "makenode")
        make_node = 1;
        in_old = in;
        in = in.right;
        goto modifiers_top
    end
    
    if(make_node && noparenting)
        @pprint[
            /   "cgrdparsehook_repseq ERROR!!!!"
            /   "This repseq rule has INVALID modifiers!"
            /   "It cannot be both `noparenting` and `makenode`!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Rule name is:"
            /   (the_name.text)
        ]
        __builtin_exit(1);
    end
    
    if(in == 0 || in.d != CG_TOK_OBRACK)
        @pprint[
            /   "cgrdparsehook_repseq ERROR!!!!"
            /   "This repseq rule lacks a terminator!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Rule name is:"
            /   (the_name.text)
        ]
        __builtin_exit(1);
    end
    @cg_bldr_foldout_arg terminating_conditions_list in
    //preserve continuity of in_orig...
    in_old.right = in;
    termination_check_code = cg_qtok("if");
    termination_check_code_rwalker = termination_check_code;
    if(terminating_conditions_list == 0)
        had_trivial_terminator = 1;
        @cgrdparsehook_repseq_termcheckcode_pushqtok "("
        @cgrdparsehook_repseq_termcheckcode_pushqtok "tok"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "=="
        @cgrdparsehook_repseq_termcheckcode_pushqtok  "0"
        @cgrdparsehook_repseq_termcheckcode_pushqtok ")"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "finish"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "end"
    elif(
        terminating_conditions_list.d == CG_TOK_OPERATOR &&
        terminating_conditions_list.text streq "?"
    )
        //
        if(terminating_conditions_list.right == 0)
            @pprint[
                /   "cgrdparsehook_repseq ERROR!!!!"
                /   "This repseq rule has a ? terminating condition,"
                /   "but there is nothing there! You must include"
                /   "an expression!"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Rule name is:"
                /   (the_name.text)
            ]
            __builtin_exit(1);
        end
        //there is arbitrary expression code here, not wrapped....
        @cgrdparsehook_repseq_termcheckcode_pushqtok "("
        //a move...
        @cgrdparsehook_repseq_termcheckcode_pushtok [terminating_conditions_list.right]
        terminating_conditions_list.right = 0;
        @cgrdparsehook_repseq_termcheckcode_pushqtok ")"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "finish"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "end"
        had_trivial_terminator = 1;
    end
    
    
    
    if(!had_trivial_terminator)
        @cgrdparsehook_repseq_termcheckcode_pushqtok "("
        @cgrdparsehook_repseq_termcheckcode_pushqtok "1"
        @cgrdparsehook_repseq_termcheckcode_pushqtok ")"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "cgstrll"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "*"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "fake_tok"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "="
        @cgrdparsehook_repseq_termcheckcode_pushqtok "tok"
        @cgrdparsehook_repseq_termcheckcode_pushqtok ";"
        
        for(
            terminating_conditions_list_walker = terminating_conditions_list, 
            terminating_conditions_list_walker != 0, 
            terminating_conditions_list_walker = terminating_conditions_list_walker.right
        )
            /*
                Allowed-
                Stringlit- match a token...
            */
            if(terminating_conditions_list_walker.d == CG_TOK_STRING)
                @cgrdparsehook_repseq_termcheckcode_pushqtok "if"
                @cgrdparsehook_repseq_termcheckcode_pushqtok "("
                @cgrdparsehook_repseq_termcheckcode_pushqtok "tok"
                @cgrdparsehook_repseq_termcheckcode_pushqtok "!="
                @cgrdparsehook_repseq_termcheckcode_pushqtok "0"
                @cgrdparsehook_repseq_termcheckcode_pushqtok ")"
                
                @cgrdparsehook_repseq_termcheckcode_pushqtok "match"
                @cgrdparsehook_repseq_termcheckcode_pushqtok "["
                @cgrdparsehook_repseq_termcheckcode_pushqtok "["
                @cgrdparsehook_repseq_termcheckcode_pushtok [terminating_conditions_list_walker:dupe()]
                @cgrdparsehook_repseq_termcheckcode_pushqtok "]"
                @cgrdparsehook_repseq_termcheckcode_pushqtok "eat"
                n_terminating_checks++;
                
                continue
            else
                @pprint[
                    /   "cgrdparsehook_repseq ERROR!!!!"
                    /   "This repseq rule has something other than a string literal in its termination list!"
                    /   "The terminating condition must be a sequence of string literals!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Rule name is:"
                    /   (the_name.text)
                ]
                __builtin_exit(1);
            end
        
        
        end //eof for
        //Finish. This is not a syntax error.
        if(noconsume) //in noconsume mode, we do not eat the terminating sequence...
            @cgrdparsehook_repseq_termcheckcode_pushqtok "tok"
            @cgrdparsehook_repseq_termcheckcode_pushqtok "="
            @cgrdparsehook_repseq_termcheckcode_pushqtok "fake_tok"
            @cgrdparsehook_repseq_termcheckcode_pushqtok ";"
        end
        @cgrdparsehook_repseq_termcheckcode_pushqtok "finish"
        
        u64 i
        for(i = 0, i < n_terminating_checks, i++)
            @cgrdparsehook_repseq_termcheckcode_pushqtok "]"
            @cgrdparsehook_repseq_termcheckcode_pushqtok "end" //the if that wraps it...
        end
        //we failed termination, reset tok to tok_fake
        @cgrdparsehook_repseq_termcheckcode_pushqtok "tok"
        @cgrdparsehook_repseq_termcheckcode_pushqtok "="
        @cgrdparsehook_repseq_termcheckcode_pushqtok "fake_tok"
        @cgrdparsehook_repseq_termcheckcode_pushqtok ";"
        
        @cgrdparsehook_repseq_termcheckcode_pushqtok "end" //end of termination check code...
    end //eof !had_trivial_terminator
    /*
        if we are doing make_node (and )
    */

    
    /*
        We are now ready to begin parsing the actual repeated sequence.
        
        we construct a giant while loop....
    */
    @cg_bldr_inittok [the_name:dupe()]
    @cg_bldr_pushqtok "["
    if(make_node)
        cgstrll* iwalker
        iwalker = in;
        @cg_bldr_pushqtok "cg_uastnode" 
        @cg_bldr_pushqtok "me"

        //assign the 
        for(
            iwalker = in, 
            iwalker != 0 && !(iwalker.d == CG_TOK_OPERATOR && iwalker.text streq ":"), 
            iwalker = iwalker.right
        )
        end
        if(iwalker != 0 && iwalker.right != 0)
            @cg_bldr_pushqtok "me"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "coord"
            @cg_bldr_pushqtok "="
            @cg_bldr_pushtok [iwalker.dupell()]
            @cg_bldr_rwalk_skip ;
        end
        @cg_bldr_pushqtok ";"
    end
    if(!noparenting)
        @cg_bldr_pushqtok "u64"
        @cg_bldr_pushqtok "cid"
        @cg_bldr_pushqtok "u64"
        @cg_bldr_pushqtok "nid"
        if(make_node)
            @cg_bldr_pushqtok "="
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "push_node"
            @cg_bldr_pushqtok "("
            @cg_bldr_pushqtok "me"
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ";"
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "stackpush"
            @cg_bldr_pushqtok "("
            @cg_bldr_pushqtok "nid"
            @cg_bldr_pushqtok ")"
        else
            @cg_bldr_pushqtok "="
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "pstack"
            @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "stackptr"
            @cg_bldr_pushqtok "-"
            @cg_bldr_pushqtok "1"
            @cg_bldr_pushqtok "]"
        end
        @cg_bldr_pushqtok ";"
    end
    //We assume we are parenting to a node above is... nid is on top of the stack...
    
    @cg_bldr_pushqtok "while"
    @cg_bldr_pushqtok "("
    @cg_bldr_pushqtok "1"
    @cg_bldr_pushqtok ")"
    //THE LEAK IS ABOVE HERE...
    /*
        Check for one instance of the sequence...
    */
    while(in != 0)
        /*Produce _one_ check...*/
        if(in.d == CG_TOK_IDENT && in.text streq "X")
            //insert terminating condition code...
            had_terminator = 1;
            @cg_bldr_pushtok [termination_check_code:dupell()]
            while(rwalk.right != 0)
                rwalk = rwalk.right
            end
            in = in.right;
            continue
            
        elif(in.d == CG_TOK_IDENT)
            //this is a rule!
            if(noparenting)
                @cg_bldr_pushqtok "do"
                @cg_bldr_pushtok [in:dupe()]
                in = in.right
                continue
            end
            
            u64 rule_eval_mode = 0;
            //check for the presence of the ^ which indicates that this rule will leave itself on
            //the stack, for parenting onto the current node.
            if(in.right != 0 && in.right.d == CG_TOK_OPERATOR && in.right.text streq "^")
                rule_eval_mode = 1;
            end
            
            //mode 0
            //do the rule...
            @cg_bldr_pushqtok "do"
            @cg_bldr_pushtok [in:dupe()]
            if(rule_eval_mode)
                in = in.right; //skip the ^...
            end

            if(rule_eval_mode)
                //the stack _has_ changed by exactly one, pop it off!
                @cg_bldr_pushqtok "cid"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "stackpop"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                
                //parent it to ourselves...
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "nid"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "cid"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
            end
            in = in.right
            continue
        elif(in.d == CG_TOK_STRING)
            //We are matching a token!
            //check for null first...
            @cg_bldr_pushqtok "do"
            @cg_bldr_pushqtok "err_on_null"
            
            @cg_bldr_pushqtok "match"
            @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "["
            @cg_bldr_pushtok [in:dupe()]
            @cg_bldr_pushqtok "]"
            @cg_bldr_pushqtok "eat" //consume it!
            @cg_bldr_pushqtok "else"
            //emit a syntax error.
                @cg_bldr_pushqtok "this"    
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "errtext"
                @cg_bldr_pushqtok "="
                /*
                    Craft an error message...
                */
                if(1)
                    cgstr errtext
                    cgstr tmp
                    errtext.fromstr("\"Language ");
                    tmp.s = spec.name.s;
                    errtext.add(tmp);
                    tmp.s = " Parse Error! (repeated sequence) Expected.... ";
                    errtext.add(tmp);
                    tmp.s = in.text;
                    errtext.add(tmp);
                    tmp.s = " But did not find it!\"";
                    errtext.add(tmp);
                    @cg_bldr_pushqtok [errtext.s]
                    errtext.free();
                end
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "go"
                @cg_bldr_pushqtok "err"
            @cg_bldr_pushqtok "]"
            in = in.right
            continue
        else
            //an error!
            @pprint[
                /   "cgrdparsehook_repseq SYNTAX ERROR!!!!"
                /   "repeated sequence contains something other"
                /   "than a rulename, X, or a string literal."
                /   "Language name is:"
                /   (spec.name.s)
                /   "Rule name is:"
                /   (the_name.text)
            ]
            __builtin_exit(1);
        end
    end
    
    
    @cg_bldr_pushqtok "end" //terminating the while...
    @cg_bldr_pushqtok "]"
    if(!had_terminator)
        @pprint[
            /       "cgrdparsehook_repseq ERROR!!!! There was no terminating condition"
            /       "for a repeating sequence rule!!!!"
            /       "That means it will loop forever."
            /       "To insert a terminating condition, put an X in your sequence,"
            /       "like so:"
            /       "my_rule \",\" my_rule2 X"
            /       "if you want zero or more (*) put an X at the beginning of your sequence."
            /       "X my_rule \",\" my_rule2 X"
            /       "Otherwise, put them at the END (or in the middle, somewhere...)"
        ]
        __builtin_exit(1);
    end
    
    if(terminating_conditions_list != 0)
        terminating_conditions_list:freelist();
    end
    //we always have check code....
    termination_check_code:freelist();
    in_orig:freelist();
    //retval:debug_print();
    return retval;
end


