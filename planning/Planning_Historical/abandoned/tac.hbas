
#guard codegen_three_address_code_library_DMHSW
/*
    THREE ADDRESS CODE GENERATION FOR SEABASS
    
    SEMANTIC DETAILS:
    
    1. We already did all the work of generating jump target linkages
    for goto, continue, break, if, elseif, etcetera. We should
    use this information to generate our TAC- I.E., we should
    not have to reproduce this information again....
    
    So we should use a LINKED LIST of insns instead of a vector
    so that we can create all necessary labels beforehand...
    
    2. 
*/
#include <stdmeta/reflect.hbas>
//#include <stdmeta/tok_manip.hbas>


codegen int CG_TAC_NOP = 0;
codegen int CG_TAC_EXPR = 1;
codegen int CG_TAC_GOTO = 2;
codegen int CG_TAC_GOTOIF = 3;
codegen int CG_TAC_SCOPE = 4;
codegen int CG_TAC_RETURN = 5;
codegen int CG_TAC_TAIL = 6; //Explicit tail call
codegen int CG_TAC_SWITCH = 7; //Switch stmt
codegen int CG_TAC_LABEL = 8; //Label.
codegen int CG_TAC_ASM = 9; //code

codegen int CG_EXPR_LOAD = 500; //used for pointer load, same as [0]

codegen int CG_TAC_PORTION_LOGOR_SHORTCIRCUIT = 1;
codegen int CG_TAC_PORTION_LOGAND_SHORTCIRCUIT = 2;
codegen int CG_TAC_PORTION_WHILE_TOP_LABEL = 3;
codegen int CG_TAC_PORTION_WHILE_SKIP_LABEL = 4;
codegen int CG_TAC_PORTION_WHILE_TEST = 5; //the gotoif for the while...
codegen int CG_TAC_PORTION_WHILE_JMP = 6; //the jump to the top of the while...
codegen int CG_TAC_PORTION_FOR_TEST = 7; 
codegen int CG_TAC_PORTION_FOR_TEST_LABEL = 8; 
codegen int CG_TAC_PORTION_FOR_SKIP_LABEL = 9; 
codegen int CG_TAC_PORTION_FOR_JMP = 10; 

//generate unique IDs for every symbol inside of scopes....
codegen uqword cg_tac_symgen = 1; //symbol generation starts at 1....
fn codegen cg_tac_gen_symname->u64:
    return cg_tac_symgen++
end


class cg_tac_expr
    noexport
    cgtype t
    i64[CG_MAX_FARGS] operands
    u64 n_operands
    cgsymdecl* ref_gsym //function template for callfnptr, or function to call for EXPR_METHOD/EXPR_FCALL
                        //for getglobalptr, getfnptr, and EXPR_GSYM this is used for retrieving global symbols.
                        //EXPR_GSYM is obviously converted into getglobalptr....
                        
    i64 dst             //destination variable uuid
    i64 ival            //for integer constants...
    f64 dval            //for double constants...
    char* stringval     //for string constants...
    
    short kind          //CG_EXPR_ type.... some kinds will not appear such as EXPR_MEMBER
                        //because we will always convert it to a sequence which uses
                        //EXPR_MEMBERPTR
end

class cg_tac_insn
    noexport
    byte* scope
    cg_tac_expr expr
    byte kind // CG_TAC_ ...
    i64 labelid //for labels and goto- what ID does this label have? 
    cgsymdecl* ref_symbol //for tail
    cgstmt* src_stmt //statement that generated this instruction...
                     //for jump target generation, this is used to determine the correct
                     //jump target destination.
                     //for instance, it tells us the scope difference
                     //of the jump (Calculated by the code validator)
    cg_tac_insn* right //next element in linked list of insns....
    
    cg_tac_insn* jtarget1
    cg_tac_insn* jtarget2
    cg_tac_insn** jtargetlist
    u64 n_jtargets
    short structure_part //What part of the structure is this part of?
end

method codegen cg_tac_insn.ctor:
    this.scope = 0;
    this.kind = 0;
    this.expr.ref_gsym = 0;
    this.expr.stringval = 0;
    this.expr.n_operands = 0;
    this.expr.kind = -1;
    this.src_stmt = 0;
    this.labelid = 0;
    this.right = 0;
    this.jtarget1 = 0;
    this.jtarget2 = 0;
    this.jtargetlist = 0;
    this.n_jtargets = 0;
    this.structure_part = 0;
end
method codegen cg_tac_insn.dtor:
    :top //recursive self tail calls, but for methods
    
    cg_tac_insn* saved_right = this.right;
    if(this.jtargetlist != 0)
        __builtin_free((u8*)this.jtargetlist);
    end
    __builtin_free((u8*)this);
    if(saved_right != 0)
        this = saved_right
        jump top // can't tail a method... or can we?
    end
end




class cg_tac_symbol
    noexport
    i64 id //negative if it's a function argument...
    cgtype t //type of the symbol
    char* srcname //name of the original variable this came from.
end

class cg_tac_scope
    noexport
    cg_tac_insn* insn_head
    cg_tac_symbol* syms
    u64 n_syms
    byte isFunctionBody //is this scope a function body?
    byte isInline //is this an inline function?
    byte detectedInliningLoop //Is an inlining loop detected?
end

method codegen cg_tac_scope.ctor:
    this.insn_head = 0;
    this.syms = 0;
    this.n_syms = 0;
    this.isFunctionBody = 0;
    this.isInline = 0;
    this.detectedInliningLoop = 0;
end
method codegen cg_tac_scope.dtor:
    u64 i
    
    if(this.insn_head != 0)
        this.insn_head.dtor()
    end
    this.insn_head = 0;
    if(this.syms != 0)
        __builtin_free((u8*)this.syms);
    end
end

method codegen cg_tac_scope:copy(cg_tac_scope** dest, byte is_inlining):
    //TODO- needed for 
    cg_tac_scope* generated
    generated = cast(cg_tac_scope*)__builtin_malloc(sizeof(cg_tac_scope));
    generated := this;
    // TODO!
    dest[0] = generated;
end



method codegen cg_tac_scope.push_farg(cgtype p,char* n)->i64:
    //TODO
    this.syms = (cg_tac_symbol*)__builtin_realloc((u8*)this.syms, sizeof(cg_tac_symbol) * ++this.n_syms);
    u64 w = this.n_syms-1;
    
    this.syms[w].id = cg_tac_gen_symname() * -1;
    this.syms[w].t := p;
    this.syms[w].srcname = n;
    return this.syms[w].id;
end

method codegen cg_tac_scope.push_var(cgtype p, char* n)->i64:
    //TODO
    this.syms = (cg_tac_symbol*)__builtin_realloc((u8*)this.syms, sizeof(cg_tac_symbol) * ++this.n_syms);
    u64 w = this.n_syms-1;
    
    this.syms[w].id = cg_tac_gen_symname();
    this.syms[w].t := p;
    this.syms[w].srcname = n;
    return this.syms[w].id;
end

method codegen cg_tac_scope.push_insn(cg_tac_insn insn):
    if(this.insn_head == 0)
        this.insn_head = insn;
        return
    end
    //we must walk the list....
    cg_tac_insn* z = this.insn_head;
    while(z.right != 0)
        z = z.right
    end
    //assign to end of list...
    z.right = insn
end

method codegen cg_tac_scope.prepend_insn(cg_tac_insn insn):
    cg_tac_insn* old_head = this.insn_head;
    this.insn_head = insn;
    insn.right = old_head;
end

codegen cgscope*[0x10000] cg_tac_cgscopestack;
codegen cg_tac_scope*[0x10000] cg_tac_scopestack;
codegen uqword cg_tac_cgscopestack_depth = 0;
codegen uqword cg_tac_scopestack_depth = 0;

fn codegen cg_tac_cgscopestack_push(cgscope* s):
    cg_tac_cgscopestack[cg_tac_cgscopestack_depth++] = s;
end

fn codegen cg_tac_cgscopestack_pop():
    cg_tac_cgscopestack_depth--;
end


fn codegen cg_tac_scopestack_push(cg_tac_scope* s):
    cg_tac_scopestack[cg_tac_scopestack_depth++] = s;
end

fn codegen cg_tac_scopestack_pop():
    cg_tac_scopestack_depth--;
end

fn codegen cg_tac_cgscopestack_gettop()->cgscope:
    return cg_tac_cgscopestack[cg_tac_cgscopestack_depth-1];
end
fn codegen cg_tac_scopestack_gettop()->cg_tac_scope:
    return cg_tac_scopestack[cg_tac_scopestack_depth-1];
end

fn codegen cg_tac_insert_pointer_read(
    i64 readfrom, //variable to read from...
    cgtype* t     //the type of the variable to be read from.
):
    //TODO: generate an CG_EXPR_LOAD
    i64 v
    cg_tac_insn* loadinsn
    loadinsn = cast(cg_tac_insn*)__builtin_malloc(sizeof(cg_tac_insn));
    loadinsn.ctor();
    loadinsn.kind = CG_TAC_EXPR;
    loadinsn.expr.t := t;
    loadinsn.expr.t.is_lvalue = 0;
    loadinsn.expr.kind = CG_EXPR_LOAD; // pointer decay...
    v = cg_tac_scopestack_gettop().push_var(loadinsn.expr.t, (char*)0);
    loadinsn.expr.dst = v;
    loadinsn.expr.operands[0] = readfrom;
    loadinsn.expr.n_operands = 1;
    cg_tac_scopestack_gettop().push_insn(loadinsn);
end

fn codegen cg_tac_insert_nop:
    //TODO: generate an CG_EXPR_LOAD
    cg_tac_insn* nopinsn
    nopinsn = cast(cg_tac_insn*)__builtin_malloc(sizeof(cg_tac_insn));
    nopinsn.ctor();
    nopinsn.kind = CG_TAC_NOP;
    cg_tac_scopestack_gettop().push_insn(nopinsn);
end

fn codegen cg_tac_convert_expr(
    cg_tac_scope cur_scope, //The scope to add this expression instruction to
    cgexpr_node srcnode,    //the source expression node.
    cgstmt srcstmt,         //the source statement of the expressio node.
    cgscope srcscope,       //the scope from which this stmt came
    cgsymdecl srcfn         //the function the scope is in.
)->i64: //returns the name of the variable that stored the value of this expression.
        
    //TODO... complicated! This creates tac_insns
    if(srcnode.kind == CG_EXPR_FCALL || srcnode.kind == CG_EXPR_METHOD)
    elif(srcnode.kind == CG_EXPR_SIZEOF)
    elif(srcnode.kind == CG_EXPR_INTLIT || srcnode.kind == CG_EXPR_CONSTEXPR_INT)
    elif(srcnode.kind == CG_EXPR_FLOATLIT || srcnode.kind == CG_EXPR_CONSTEXPR_FLOAT)
    elif(srcnode.kind == CG_EXPR_LSYM)
    elif(srcnode.kind == CG_EXPR_GSYM)
        //This will yield a POINTER to the gsym....
        //luckily, we CAST every SYM usage, so this
        //will be TRANSFORMED into a value
        //by the cast for a read, but for a write,
        //we must detect it inside of ASSIGN/INCR/DECR
    elif(srcnode.kind == CG_EXPR_POST_INCR)
        //REMEMBER the LSYM detail!!! (GSYM/INDEX require conversion to MOVEs)
    elif(srcnode.kind == CG_EXPR_POST_DECR)
        //REMEMBER the LSYM detail!!!
    elif(srcnode.kind == CG_EXPR_INDEX)
        //Indexing a pointer yields an LVALUE, which is ASSIGNABLE.
        //We must remember this whenever we do an ASSIGNMENT or a CAST.
        //ASSIGNMENT must convert the assignment into an EXPR_MOVE
        //CAST must perform a READ from the pointer....
    elif(srcnode.kind == CG_EXPR_MEMBER)
    elif(srcnode.kind == CG_EXPR_CAST)
        //if it was an INDEX or CAST we must read the pointer into a value...
    elif(srcnode.kind == CG_EXPR_NEG)
    elif(srcnode.kind == CG_EXPR_COMPL)
    elif(srcnode.kind == CG_EXPR_PRE_INCR)
        //NOTE: we must detect if this is LSYM to see if it's valid to literally just increment...
    elif(srcnode.kind == CG_EXPR_PRE_DECR)
        //NOTE: we must detect if this is LSYM to see if it's valid to literally just decrement...
    elif(srcnode.kind == CG_EXPR_MUL)
    elif(srcnode.kind == CG_EXPR_DIV)
    elif(srcnode.kind == CG_EXPR_MOD)
    elif(srcnode.kind == CG_EXPR_ADD)
    elif(srcnode.kind == CG_EXPR_SUB)
    elif(srcnode.kind == CG_EXPR_BITOR)
    elif(srcnode.kind == CG_EXPR_BITAND)
    elif(srcnode.kind == CG_EXPR_LSH)
    elif(srcnode.kind == CG_EXPR_RSH)
    elif(srcnode.kind == CG_EXPR_LOGOR)
    elif(srcnode.kind == CG_EXPR_LOGAND)
    elif(srcnode.kind == CG_EXPR_LT)
    elif(srcnode.kind == CG_EXPR_GT)
    elif(srcnode.kind == CG_EXPR_LTE)
    elif(srcnode.kind == CG_EXPR_GTE)
    elif(srcnode.kind == CG_EXPR_EQ)
    elif(srcnode.kind == CG_EXPR_NEQ)
    elif(srcnode.kind == CG_EXPR_ASSIGN)
    elif(srcnode.kind == CG_EXPR_MOVE)
    elif(srcnode.kind == CG_EXPR_STREQ)
    elif(srcnode.kind == CG_EXPR_STRNEQ)
    elif(srcnode.kind == CG_EXPR_MEMBERPTR)
    elif(srcnode.kind == CG_EXPR_GETFNPTR)
    elif(srcnode.kind == CG_EXPR_CALLFNPTR)
    elif(srcnode.kind == CG_EXPR_GETGLOBALPTR)
    end
    //
    __builtin_puts("!!!!WARNING/ERROR!!!!! cg_tac_convert_expr fell through.....");
    return 0;
end


//Generating the raw instructions...
fn codegen cg_tac_convert_scope_pass1(
    cg_tac_insn parent_insn, 
    cgscope srcscope, 
    cgsymdecl srcfn
):
    parent_insn.scope = __builtin_malloc(sizeof(cg_tac_scope));
    cg_tac_scope* s = (cg_tac_scope*)parent_insn.scope;
    u64 i
    for(i = 0, i < srcscope.nsyms, i++)
        s.push_var(srcscope.syms[i].t, srcscope.syms[i].name);
    end
    //TODO... convert stmts....
    /*
        In this pass, we ONLY generate the instructions themselves
        but NOT any jump targets.
        After all instructions are generated, we then traverse 
        the entire tree and insert goto targets based on
        the kind of in
    
    */
    //at the end of the scope, we will have a NOP....

end

fn codegen cg_tac_scope_process_pass2(
    cg_tac_insn parent_insn
):
    cg_tac_scope* s = (cg_tac_scope*)parent_insn.scope;

    //TODO: Generate all jump targets....
    /*
        FOR IF STATEMENTS:
            Generate the jump to the end of the elif chain.
        FOR ELIF STATEMENTS:
            Generate the jump to the end of the elif chain.
        FOR ELSE STATEMENTS:
            Do nothing...
        FOR WHILE STATEMENTS:
            Generate the jump immediately past end of the while,
            as well as the jump to the beginning of the while.
    */

end


//Main entry point...
fn codegen cg_tac_convert_function(cgsymdecl* s)->cg_tac_scope:
    cg_tac_scopestack_depth = 0; //reset the scopestack...
    cg_tac_scope* rval;
    cgscope* fbody = (cgscope*)s.fbody;
    rval = (cg_tac_scope*)__builtin_malloc(sizeof(cg_tac_scope));
    rval.ctor();
    rval.isFunctionBody = 1;
    //TODO- convert function arguments...
    i64 i
    cg_tac_scopestack_push(rval);
    cg_tac_cgscopestack_push(fbody);
    for(i = 0, i < s.nargs, i++)
        rval.push_farg(s.fargs[i],s.fargs[i].membername);
    end
    //TODO: Convert function body..
    //safety- catch fbody is null (Should never happen....)
    if(fbody == 0)
        return rval
    end
    
    for(i = 0, i < fbody.nsyms, i++)
        rval.push_var(fbody.syms[i].t, fbody.syms[i].name);
    end
    //TODO: Convert statements...
    cg_tac_cgscopestack_pop();
    cg_tac_scopestack_pop();
    
    return rval;
end


