

#guard OPENAL_1_1

#include <toc/inlinec.hbas>

data codegen string AL_1_1_PREFIX "
#include <AL/alc.h>
#include <AL/al.h>
";
#define ALboolean byte
#define ALchar sbyte
#define ALbyte sbyte
#define ALubyte byte
#define ALshort short
#define ALushort ushort
#define ALint int
#define ALuint uint
#define ALsizei uint
#define ALenum uint
#define ALfloat f32
#define ALdouble f64

#define ALCboolean byte
#define ALCchar sbyte
#define ALCbyte sbyte
#define ALCubyte byte
#define ALCshort short
#define ALCushort ushort
#define ALCint int
#define ALCuint uint
#define ALCsizei uint
#define ALCenum uint
#define ALCfloat f32
#define ALCdouble f64

//context management...
fn inline alcCreateContext(byte* dev, int* attrlist)->byte*:
    @inline_C "return (unsigned char*)alcCreateContext(
        (ALCdevice*)$dev,
        $attrlist
    );"
end
fn inline alcMakeContextCurrent(byte* ctx)->byte:
    @inline_C "return alcMakeContextCurrent((ALCcontext*)$ctx);"
end
fn inline alcProcessContext(byte* ctx):
    @inline_C "alcProcessContext((ALCcontext*)$ctx);"
end
fn inline alcSuspendContext(byte* ctx):
    @inline_C "alcSuspendContext((ALCcontext*)$ctx);"
end
fn inline alcDestroyContext(byte* ctx):
    @inline_C "alcDestroyContext((ALCcontext*)$ctx);"
end
fn inline alcGetCurrentContext()->byte*:
    asm("return (unsigned char*)alcGetCurrentContext();")
end
fn inline alcGetContextsDevice(byte* ctx)->byte*:
    @inline_C "return (unsigned char*)alcGetContextsDevice((ALCcontext*)$ctx);"
end
fn inline alcGetError(byte* dev)->ALenum:
    @inline_C "return alcGetError((ALCdevice*)$dev);"
end
fn inline alGetError()->ALenum:
    asm("return alGetError();")
end
fn inline alcOpenDevice(byte* devname)->byte*:
    @inline_C "return (unsigned char*)alcOpenDevice((ALCchar*)$devname);"
end
fn inline alcCloseDevice(byte* dev)->ALboolean:
    @inline_C "return alcCloseDevice((ALCdevice*)$dev);"
end

fn inline alcIsExtensionPresent(byte* dev, byte* extname)->ALboolean:
    @inline_C "return alcIsExtensionPresent((ALCdevice*)$dev, (ALCchar*)$extname);"
end
fn inline alIsExtensionPresent(byte* extname)->ALboolean:
    @inline_C "return alIsExtensionPresent((ALchar*)$extname);"
end

fn inline alcGetProcAddress(byte* dev, byte* fname)->byte*:
    @inline_C "return alcGetProcAddress((ALCdevice*)$dev, (ALCchar*)$fname);"
end

fn inline alGetProcAddress(byte* fname)->byte*:
    @inline_C "return alGetProcAddress((ALchar*)$fname);"
end


fn inline alcGetEnumValue(byte* dev, byte* fname)->ALenum:
    @inline_C "return alcGetEnumValue((ALCdevice*)$dev, (ALCchar*)$fname);"
end
fn inline alGetEnumValue(byte* fname)->ALenum:
    @inline_C "return alGetEnumValue((ALchar*)$fname);"
end

fn inline alcGetString(byte* dev, ALCenum param)->byte*:
    @inline_C "return (unsigned char*)alcGetString((ALCdevice*)$dev, $param);"
end
fn inline alGetString(ALCenum param)->byte*:
    @inline_C "return (unsigned char*)alGetString($param);"
end

fn inline alcGetIntegerv(byte* dev, ALCenum param, ALCsizei sz, ALCint* d):
    @inline_C "alcGetIntegerv((ALCdevice*)$dev, $param, $sz, $d);"
end
fn inline alcCaptureOpenDevice(byte* devname, ALCuint freq, ALCenum f, ALCsizei bufsz)->byte*:
    @inline_C "return (unsigned char*)alcCaptureOpenDevice(
        (ALCchar*)$devname,
        $freq,
        $f,
        $bufsz
    );"
end
fn inline alcCaptureCloseDevice(byte* dev)->ALboolean:
    @inline_C "return alcCaptureCloseDevice((ALCdevice*)$dev);"
end

fn inline alcCaptureStart(byte* dev):
    @inline_C "alcCaptureStart((ALCdevice*)$dev);"
end

fn inline alcCaptureStop(byte* dev):
    @inline_C "alcCaptureStop((ALCdevice*)$dev);"
end
fn inline alcCaptureSamples(byte* dev, byte* buf, ALCsizei samples):
    @inline_C "alcCaptureSamples((ALCdevice*)$dev, $buf, $samples);"
end






fn inline alGenBuffers(ALsizei n, ALuint* buffers):
    @inline_C "alGenBuffers($n, $buffers);"
end
fn inline alDeleteBuffers(ALsizei n, ALuint* buffers):
    @inline_C "alDeleteBuffers($n, $buffers);"
end
fn inline alIsBuffer(ALuint b)->ALboolean:
    @inline_C "return alIsBuffer($b);"
end
fn inline alBufferData( ALuint b, ALenum f, byte *d, ALsizei size, ALsizei freq):
    @inline_C "alBufferData($b, $f, $d, $size, $freq);"
end

fn inline alBufferf( ALuint b, ALenum param, ALfloat v):
    @inline_C "alBufferf($b, $param, $v);"
end
fn inline alBuffer3f( ALuint b, ALenum param, ALfloat v1, ALfloat v2, ALfloat v3):
    @inline_C "alBuffer3f($b, $param, $v1, $v2, $v3);"
end
fn inline alBufferfv( ALuint b, ALenum param, ALfloat* v):
    @inline_C "alBufferfv($b, $param, $v);"
end


fn inline alBufferi( ALuint b, ALenum param, ALint v):
    @inline_C "alBufferi($b, $param, $v);"
end
fn inline alBuffer3i( ALuint b, ALenum param, ALint v1, ALint v2, ALint v3):
    @inline_C "alBuffer3i($b, $param, $v1, $v2, $v3);"
end
fn inline alBufferiv( ALuint b, ALenum param, ALint* v):
    @inline_C "alBufferiv($b, $param, $v);"
end


fn inline alGetBufferf( ALuint b, ALenum param, ALfloat* v):
    @inline_C "alGetBufferf($b, $param, $v);"
end
fn inline alGetBuffer3f( ALuint b, ALenum param, ALfloat* v1, ALfloat* v2, ALfloat* v3):
    @inline_C "alGetBuffer3f($b, $param, $v1, $v2, $v3);"
end
fn inline alGetBufferfv( ALuint b, ALenum param, ALfloat* v):
    @inline_C "alGetBufferfv($b, $param, $v);"
end


fn inline alGetBufferi( ALuint b, ALenum param, ALint* v):
    @inline_C "alGetBufferi($b, $param, $v);"
end
fn inline alGetBuffer3i( ALuint b, ALenum param, ALint* v1, ALint* v2, ALint* v3):
    @inline_C "alGetBuffer3i($b, $param, $v1, $v2, $v3);"
end
fn inline alGetBufferiv( ALuint b, ALenum param, ALint* v):
    @inline_C "alGetBufferiv($b, $param, $v);"
end
fn inline alGenSources( ALsizei n, ALuint* s):
    @inline_C "alGenSources($n, $s);"
end

fn inline alDeleteSources( ALsizei n, ALuint* s):
    @inline_C "alDeleteSources($n, $s);"
end
fn inline alIsSource(ALuint b)->ALboolean:
    @inline_C "return alIsSource($b);"
end

//alSource
fn inline alSourcef( ALuint b, ALenum param, ALfloat v):
    @inline_C "alSourcef($b, $param, $v);"
end
fn inline alSource3f( ALuint b, ALenum param, ALfloat v1, ALfloat v2, ALfloat v3):
    @inline_C "alSource3f($b, $param, $v1, $v2, $v3);"
end
fn inline alSourcefv( ALuint b, ALenum param, ALfloat* v):
    @inline_C "alSourcefv($b, $param, $v);"
end

fn inline alSourcei( ALuint b, ALenum param, ALint v):
    @inline_C "alSourcei($b, $param, $v);"
end
fn inline alSource3i( ALuint b, ALenum param, ALint v1, ALint v2, ALint v3):
    @inline_C "alSource3i($b, $param, $v1, $v2, $v3);"
end
fn inline alSourceiv( ALuint b, ALenum param, ALint* v):
    @inline_C "alSourceiv($b, $param, $v);"
end



fn inline alGetSourcef( ALuint b, ALenum param, ALfloat* v):
    @inline_C "alGetSourcef($b, $param, $v);"
end
fn inline alGetSource3f( ALuint b, ALenum param, ALfloat* v1, ALfloat* v2, ALfloat* v3):
    @inline_C "alGetSource3f($b, $param, $v1, $v2, $v3);"
end
fn inline alGetSourcefv( ALuint b, ALenum param, ALfloat* v):
    @inline_C "alGetSourcefv($b, $param, $v);"
end

fn inline alGetSourcei( ALuint b, ALenum param, ALint* v):
    @inline_C "alGetSourcei($b, $param, $v);"
end
fn inline alGetSource3i( ALuint b, ALenum param, ALint* v1, ALint* v2, ALint* v3):
    @inline_C "alGetSource3i($b, $param, $v1, $v2, $v3);"
end
fn inline alGetSourceiv( ALuint b, ALenum param, ALint* v):
    @inline_C "alGetSourceiv($b, $param, $v);"
end




fn inline alSourcePlay(ALuint b):
    @inline_C "return alSourcePlay($b);"
end
fn inline alSourcePlayv( ALsizei n, ALuint* s):
    @inline_C "alSourcePlayv($n, $s);"
end

fn inline alSourcePause(ALuint b):
    @inline_C "return alSourcePause($b);"
end
fn inline alSourcePausev( ALsizei n, ALuint* s):
    @inline_C "alSourcePausev($n, $s);"
end

fn inline alSourceStop(ALuint b):
    @inline_C "return alSourceStop($b);"
end
fn inline alSourceStopv( ALsizei n, ALuint* s):
    @inline_C "alSourceStopv($n, $s);"
end

fn inline alSourceRewind(ALuint b):
    @inline_C "return alSourceRewind($b);"
end
fn inline alSourceRewindv( ALsizei n, ALuint* s):
    @inline_C "alSourceRewindv($n, $s);"
end

fn inline alSourceQueueBuffers(
    ALuint src,
    ALsizei n,
    ALuint* b
):
    @inline_C "alSourceQueueBuffers($src, $n, $b);"
end

fn inline alSourceUnqueueBuffers(
    ALuint src,
    ALsizei n,
    ALuint* b
):
    @inline_C "alSourceUnqueueBuffers($src, $n, $b);"
end

//listener


//alSource
fn inline alListenerf( ALenum param, ALfloat v):
    @inline_C "alListenerf($param, $v);"
end
fn inline alListener3f( ALenum param, ALfloat v1, ALfloat v2, ALfloat v3):
    @inline_C "alListener3f($param, $v1, $v2, $v3);"
end
fn inline alListenerfv(  ALenum param, ALfloat* v):
    @inline_C "alListenerfv($param, $v);"
end

fn inline alListeneri(ALenum param, ALint v):
    @inline_C "alListeneri($param, $v);"
end
fn inline alListener3i(ALenum param, ALint v1, ALint v2, ALint v3):
    @inline_C "alListener3i($param, $v1, $v2, $v3);"
end
fn inline alListeneriv(ALenum param, ALint* v):
    @inline_C "alListeneriv($param, $v);"
end



fn inline alGetListenerf(ALenum param, ALfloat* v):
    @inline_C "alGetListenerf($param, $v);"
end
fn inline alGetListener3f( ALenum param, ALfloat* v1, ALfloat* v2, ALfloat* v3):
    @inline_C "alGetListener3f($param, $v1, $v2, $v3);"
end
fn inline alGetListenerfv(ALenum param, ALfloat* v):
    @inline_C "alGetListenerfv($param, $v);"
end

fn inline alGetListeneri(ALenum param, ALint* v):
    @inline_C "alGetListeneri($param, $v);"
end
fn inline alGetListener3i(ALenum param, ALint* v1, ALint* v2, ALint* v3):
    @inline_C "alGetListener3i($param, $v1, $v2, $v3);"
end
fn inline alGetListeneriv(ALenum param, ALint* v):
    @inline_C "alGetListeneriv($param, $v);"
end

fn inline alEnable(ALenum b):
    @inline_C "alEnable($b);"
end

fn inline alDisable(ALenum b):
    @inline_C "alDisable($b);"
end

fn inline alIsEnabled(ALenum b)->ALboolean:
    @inline_C "return alIsEnabled($b);"
end
fn inline alGetBoolean(ALenum b)->ALboolean:
    @inline_C "return alGetBoolean($b);"
end
fn inline alGetDouble(ALenum b)->ALdouble:
    @inline_C "return alGetDouble($b);"
end
fn inline alGetFloat(ALenum b)->ALfloat:
    @inline_C "return alGetFloat($b);"
end
fn inline alGetInteger(ALenum b)->ALint:
    @inline_C "return alGetInteger($b);"
end

fn inline alGetBooleanv(ALenum param, ALboolean* v):
    @inline_C "alGetBooleanv($param, (ALboolean*)$v);"
end

fn inline alGetDoublev(ALenum param, ALdouble* v):
    @inline_C "alGetDoublev($param, $v);"
end

fn inline alGetFloatv(ALenum param, ALfloat* v):
    @inline_C "alGetFloatv($param, $v);"
end


fn inline alGetIntegerv(ALenum param, ALint* v):
    @inline_C "alGetIntegerv($param, $v);"
end
fn inline alDistanceModel(ALenum b):
    @inline_C "alDistanceModel($b);"
end

fn inline alDopplerFactor(ALfloat b):
    @inline_C "alDopplerFactor($b);"
end

fn inline alSpeedOfSound(ALfloat b):
    @inline_C "alSpeedOfSound($b);"
end

//noexport uint AL_
@wrap_c_constant uint AL_INVALID_VALUE;
@wrap_c_constant uint AL_INVALID_OPERATION;
@wrap_c_constant uint AL_INVALID_NAME;
@wrap_c_constant uint AL_INVALID_ENUM;
@wrap_c_constant uint AL_OUT_OF_MEMORY;
@wrap_c_constant uint AL_NO_ERROR;
@wrap_c_constant uint AL_FREQUENCY;
@wrap_c_constant uint AL_BITS;
@wrap_c_constant uint AL_CHANNELS;
@wrap_c_constant uint AL_SIZE;
@wrap_c_constant uint AL_PITCH;
@wrap_c_constant uint AL_GAIN;
@wrap_c_constant uint AL_MIN_GAIN;
@wrap_c_constant uint AL_MAX_GAIN;
@wrap_c_constant uint AL_MAX_DISTANCE;
@wrap_c_constant uint AL_ROLLOFF_FACTOR;
@wrap_c_constant uint AL_CONE_OUTER_GAIN;
@wrap_c_constant uint AL_CONE_INNER_ANGLE;
@wrap_c_constant uint AL_CONE_OUTER_ANGLE;
@wrap_c_constant uint AL_REFERENCE_DISTANCE;
@wrap_c_constant uint AL_POSITION;
@wrap_c_constant uint AL_VELOCITY;
@wrap_c_constant uint AL_DIRECTION;
@wrap_c_constant uint AL_SOURCE_RELATIVE;
@wrap_c_constant uint AL_SOURCE_TYPE;
@wrap_c_constant uint AL_LOOPING;
@wrap_c_constant uint AL_BUFFER;
@wrap_c_constant uint AL_SOURCE_STATE;
@wrap_c_constant uint AL_BUFFERS_QUEUED;
@wrap_c_constant uint AL_BUFFERS_PROCESSED;
@wrap_c_constant uint AL_SEC_OFFSET;
@wrap_c_constant uint AL_SAMPLE_OFFSET;
@wrap_c_constant uint AL_BYTE_OFFSET;
@wrap_c_constant uint AL_ORIENTATION;
@wrap_c_constant uint AL_DOPPLER_FACTOR;
@wrap_c_constant uint AL_SPEED_OF_SOUND;
@wrap_c_constant uint AL_DISTANCE_MODEL;
@wrap_c_constant uint ALC_FREQUENCY;
@wrap_c_constant uint ALC_MONO_SOURCES;
@wrap_c_constant uint ALC_STEREO_SOURCES;
@wrap_c_constant uint ALC_REFRESH;
@wrap_c_constant uint ALC_SYNC;
@wrap_c_constant uint ALC_NO_ERROR;
@wrap_c_constant uint ALC_INVALID_DEVICE;
@wrap_c_constant uint ALC_INVALID_CONTEXT;
@wrap_c_constant uint ALC_INVALID_ENUM;
@wrap_c_constant uint ALC_INVALID_VALUE;
@wrap_c_constant uint ALC_OUT_OF_MEMORY;


