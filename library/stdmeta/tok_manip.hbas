

#guard compiletime_tokenlist_manipulation_tools_DMHSW

#include <stdmeta/wksht.hbas>
#include <stdmeta/cgrdparse.hbas>

/*
    TOOLS FOR MANIPULATING TOKENS AND STRINGS
    
    While writing tools for Seabass I have noticed
    I spend a lot of time writing complex
    manipulations of them. I believe I can write
    a set of macros, templates, and syntaxes that
    will make it much easier for me to work with them.
    
    tool 1: tokmanip_push_tokens
    
        Enables me to write code "normally" for sequential pushqtoks
        after the first token.
    
    tool 2: foldout_arg
    
        Quickly grab an argument (bracketed or not) off of an argument list.
        
        This has previously been something I had to do by hand, manually.
        
    tool 3: pprint
        
        "Pretty printer". Printf's cooler older cousin.
        
    tool 4: cgbuf
    
        Dynamically allocated byte array.
        
    tool 5: cgtoklist
*/




/*
    foldout_arg
    
    usage:
    @dupell_inlist
    cgstrll* my_arg
    
    @foldout_arg my_arg inlist_dupe
    
    //my_arg now contains the de-bracketed first argument.
    //if inlist_dupe was NULL, or the first argument was
    //an empty set of curly braces, then my_arg
    //will also be null.
    
    this
*/




// ARG1 = NEXT THING OFF THE FRONT OF ARG2

// @mybuilder [these are the first argument] [these are the second argument]


/*
    Usage:
    @cg_tokmanip_push_tokens[
        fn codegen myfunc ( ):
        
        end
    ]
*/
@mkbldr [ cg_bldr_tokmanip_push_strings
    
    
    //INPUT...
    cgstrll* in_walker
    
    in_walker = inlist;
    //semicolons are safe.
    @initqtok ";"
    
    

    for(in_walker = inlist, in_walker != cast(cgstrll*)0, in_walker = in_walker.right)
        :looptop
        char* text
        if(in_walker.d == CG_TOK_UNKNOWN && in_walker.text streq "$") //the escape character!
            cgstrll* in_walker_old = in_walker;
            in_walker = in_walker.right;
            if(in_walker == 0) break end
            //They want to do a pushqtok by-hand inside the sequence...
            if(in_walker.d == CG_TOK_STRING)
                @pushqtok "@"
                @pushqtok "cg_bldr_pushqtok"
                @pushtok [in_walker:dupe()]
                continue
            end
            //arbitrary code inside of brackets...
            if(in_walker.d == CG_TOK_OBRACK)
                cgstrll* code
                @foldout_arg code in_walker
                //maintain continuity of inlist...
                in_walker_old.right = in_walker;
                if(code != 0)
                    @pushtok [code]
                    @rwalk_skip ;
                end
                goto looptop //we don't want to skip what in_walker is pointing at...
            end
            //if we don't find anything, assume that the escape code
            //was to escape another dollar sign or some other special sequence.
        end
        
        text = in_walker:to_cstr();
        if(text == cast(char*)0)
            char[50] buf
            __builtin_puts("cg_tokmanip_push_strings ERROR");
            __builtin_puts("Token was to-string'd and we got nothing!");
            __builtin_puts("File is:");
            __builtin_puts(in_walker.filename);
            __builtin_puts("Line is:");
            __builtin_itoa(buf, in_walker.linenum);
            __builtin_puts(buf);
            __builtin_puts("Col is:");
            __builtin_itoa(buf, in_walker.colnum);
            __builtin_puts(buf);
            __builtin_puts("Go check that out!");
            __builtin_exit(1);
        end
        @pushqtok "@"
        @pushqtok "cg_bldr_pushqtok"
        @pushqtok [text]
        __builtin_free(text);
    end
    return retval;
]




@cgrdparser [
    pprint
    [
        //variables
        cgstrll* output_code;
        cgstrll* rwalk;
        cgstr print_command;
        cgstr itoa_command;
    ]
    head[
        //push stuff we need onto the front.
        cgstrll* rwalk
        this.output_code = cg_qtok(";");
        rwalk = this.output_code;
        @cg_bldr_tokmanip_push_strings[
            if(1)
                char[250] __pprint_local_buf
        ]
        finish_on_tok_null
        if(tok.d == CG_TOK_IDENT)
            this.print_command:fromstr(tok.text);
            eat
            finish_on_tok_null
            if(tok.d == CG_TOK_IDENT)
                this.itoa_command:fromstr(tok.text);
                eat
                finish_on_tok_null
            end
        else
            this.print_command:fromstr("__builtin_puts");
            this.itoa_command:fromstr("__builtin_itoa");
        end
        while(1)
            finish_on_tok_null
            if(tok.d != CG_TOK_OPERATOR) 
                finish 
            end
            if(tok_has_text)
                if(tok.text strneq "/")
                    finish
                end
            end
            eat
            finish_on_tok_null
            this.rwalk = rwalk;
            do norm
            rwalk = this.rwalk;
        end
    ]
    norm[
        match[["itoa"]
            eat
            finish_on_tok_null
            do command_printintexpr
            finish
        ]
        match[["int"]
            eat
            finish_on_tok_null
            do command_printintexpr
            finish
        ]
        match[["bar"]
            do dobar
            finish
        ]
        //this is a string expression.
        go command_printstringexpr
    ]
    dobar[
        cgstrll* rwalk
        rwalk = this.rwalk;
        eat 
        //emit a bar...
        @cg_bldr_pushqtok [this.print_command.s]
        @cg_bldr_tokmanip_push_strings[
            ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        ]
        this.rwalk = rwalk;
        finish_on_tok_null
    ]
    command_printstringexpr[
        cgstrll* rwalk
        rwalk = this.rwalk;
            pushqtok [this.print_command.s]
            @cg_bldr_pushqtok "("
                this.rwalk = rwalk;
                    do getexpr
                rwalk = this.rwalk;
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ";"
        this.rwalk = rwalk;
    ]
    command_printintexpr[
        cgstrll* rwalk
        rwalk = this.rwalk;
            @cg_bldr_pushqtok [this.itoa_command.s]
            @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "__pprint_local_buf"
                @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "("
                        this.rwalk = rwalk;
                            do getexpr
                        rwalk = this.rwalk;
                    @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok [this.print_command.s]
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "__pprint_local_buf"
                @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ";"
        this.rwalk = rwalk;
    ]
    getexpr[
        cgstrll* rwalk
        rwalk = this.rwalk;
        if(tok_null)
            //emit an error
            __builtin_puts("PPRINT ERROR!");
            __builtin_puts("Expected an expression, but got NULL!");
            __builtin_exit(1);
        elif(tok.d == CG_TOK_OPAREN)
            i64 pcount
            pcount = 0;
            for(
                pcount = 0, 
                tok_not_null,
                tok = tok.right
            )
                if(tok.d == CG_TOK_OPAREN)
                    pcount++;
                elif(tok.d == CG_TOK_CPAREN)
                    pcount--;
                end
                
                @cg_bldr_pushtok[tok:dupe()]
                if(pcount < 1) break end
            end
            if(pcount != 0)
                __builtin_puts("PPRINT ERROR");
                __builtin_puts("Unmatched Parentheses!");
                __builtin_exit(1);
            end
            eat
        else
            @cg_bldr_pushtok [tok:dupe()]
            eat
        end
        this.rwalk = rwalk;
    ]
    finish[
        //push the last bit of what we need... we need to 
        this.output_code:push_end(cg_qtok("end")); //close up the if statement.
        this.print_command:free();
        this.itoa_command:free();
        emit [this.output_code]
        finish
    ]
]


class cgbuf noexport
    byte* d
    u64 sz
end

method codegen cgbuf.ctor():
    this.d = 0;
    this.sz = 0;
end
method codegen cgbuf.dtor():
    if(this.d != 0)
        __builtin_free(this.d);
    end
end
//require memory.
method codegen cgbuf.req(u64 nsz)->u64:
    if(this.sz >= nsz) return this.sz end
    this.sz = nsz;
    this.d = __builtin_realloc(this.d, nsz);
    return nsz;
end

/*
    TOKEN LIST CLASS
*/

class cgtoklist
    noexport
    cgstrll* b
    cgstrll* e
end

method codegen cgtoklist.from(cgstrll* a):
    this.b = a;
    while(a.right != 0) a = a.right end
    this.e = a;
end

//add a single token
method codegen cgtoklist.addtok(cgstrll* a):
    this.e.right = a;
    this.e = a;
end

//add multiple tokens...
method codegen cgtoklist.addtoks(cgstrll* a):
    this.e.right = a;
    this.e = a;
    //rwalk skip!
    while(this.e.right != 0) this.e = this.e.right end
end

//insert onto cgstrll...
method codegen cgstrll.insert_right(cgstrll* r)->cgstrll*:
    cgstrll* or = this.right;
    this.right = r;
    while(r.right != 0) r = r.right end
    r.right = or;
    return r
end

//replace all non-string tokens that match a string with a list of tokens...
method codegen cgtoklist.replace_text_with_list(char* txt, cgstrll* r):
    cgstrll fake
    cgstrll* wlk = 0;
    cgstrll* prev = fake;
    fake.right = this.b;
    for(wlk = this.b, wlk != 0, 0)
        if(wlk.d == CG_TOK_STRING || wlk.text == 0)
            goto lcont
        end
        if(wlk.text strneq txt)
            goto lcont
        end
        //it matches!
        //is this the end?
        if(wlk.right == 0) //the end of the list!
            cgstrll* z //walk the dupell'd thing...
            wlk.freelist();
            prev.right = r.dupell();
            z = prev.right;
            while(z.right != 0) z = z.right end
            this.e = z;
            goto finale //we know this is the end!
        else
            cgstrll* z //walk the dupell'd thing...
            cgstrll* v
            v = wlk.right; //fetch the thing to the right of the node we're replacing...
            wlk.right = 0; //set the node to replace's right to zero...
            wlk.freelist(); //free that node...
            prev.right = r.dupell(); //the previous node has the replacement list inserted...
            //perform an rwalk_right through the duplicated replacement list
            z = prev.right;
            while(z.right != 0) z = z.right end
            //assign the old right...
            z.right = v;
            //assign wlk!
            wlk = z;
            goto lcont
        end
        
        //advance!
        :lcont
        prev = wlk;
        wlk = wlk.right;
    end
    :finale
    this.b = fake.right;
end


