


#guard ABSTRACT_OBJECT_PROGRAMMING_LANGUAGE_DMHSW

/*
    THE ABSTRACT OBJECT PROGRAMMING LANGUAGE
    
    I want a programming language flexible enough to represent
    any kind of code in a data structure that is infinitely flexible,
    with mutable code generation.
    
    PRINCIPLE IDEAS:
    
    1. Context-oriented programming. You can establish a scope or context
    for just about anything, and define relationships and write code that
    is to be interpreted in that context.
    
    2. Interpretation-oriented programming. The language being mutable allows
    you to define
    
    WHAT'S THE GIST?
    
    A software architecture is described in terms of objects and code in a
    hierarchy- everything from the classes defined to the variables in a scope
    to the control flow itself.
*/


#include <stdmeta/tbas.hbas>

class cg_aopl_ext_fact
    noexport
    u64 classification
        //0 - unclassified
        //1 - integer
        //2 - double
    i64 i
    f64 d
end


codegen u64 cg_aopl_user_classification_counter = 128;
codegen @cgvec[char*] cg_aopl_global_user_type_directory;


//The abstract object!
class cg_aopl_object
    noexport
    char* name
    char* atype//abstract type specified by string.
               //note that we can only have one type!
               //compound types are their own types!
    u64 classification
    //LOW LEVEL CLASSIFICATION- WHAT IS THIS?
    //0    - unclassified
    //1    - low level symbol
    //2    - low level typedecl
    //3    - low level fn
    //4    - fact
    
    //100+ - user defined
    byte* ext_ptr //see cg_aopl_ext
    u64 has_ctx   //does it have a context?
    byte* ctx_ptr //see cg_aopl_ctx,
                  //an object may have its own personal context,
                  //to which it is owner.
    byte* ctx_parent //contextual parent- if this is null, we consider this cg_aopl_object
    //to be global! This points to a cg_aopl_ctx!
end


class cg_aopl_ctx
    noexport
    cg_aopl_object*             owner
    @cgvec[cg_aopl_object*]     objects
    cgstrll*                    code
end

class cg_aopl_ext
    noexport
    union
    cgsymdecl                   ll_sym
    cgtypedecl                  ll_tdecl
    cgscope                     ll_ins_seq
    cg_aopl_ext_fact            fact
    byte*                       user_ext
end

//OBJECT
method codegen cg_aopl_object.ctor:
    this.name = 0;
    this.atype = 0;
    this.classification = 0;
    this.has_ctx = 0;
    this.ctx_parent = 0;
end
method codegen cg_aopl_object.dtor:
    
end

//CTX
method codegen cg_aopl_ctx.ctor:
    this.objects.ctor();
end
method codegen cg_aopl_ctx.dtor:
    this.objects.dtor();
end


//ext cannot be initialized or destroyed as it is a union of types...

