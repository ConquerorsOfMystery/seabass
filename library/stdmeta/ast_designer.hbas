

#guard compiletime_ast_designer_lowlevel_DMHSW

#include <stdmeta/cgrdparse.hbas>
#include <stdmeta/cgstl.hbas>


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  THE CONTEXT STACK
//  "What is the current loop construct?" (i.e. while parsing, generating your AST)?
//  Sometimes you need to know what the "last X" you parsed was, or "X you are under"
//  I want to design a data structure specificall for this.
/*
    You need a sequence of pointers and names.
    struct myCtxStruct
        noexport
        myStruct* mystruct
        myStruct* myLoop
        [...]
    end
    
    Then you define a "context stack data structure"
    struct myCtxStructDataStack
        noexport
        @cgvec[myCtxStruct] stk
    end
    
    Then you write methods...
    method codegen myCtxStructDataStack.get_mystruct()->myStruct*:
        //start from the end of the vector and look for the first non-null
        //entry in any myCtxStruct's mystruct field.
    end
    
    you also need methods for pushing new contexts...
    
    @cg_ast_ctx_stk[
        myField1* a
        myField2* b
    ]
    should define the ctx struct as well as the ctx itself.
    the evaluation
*/
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

codegen u64 cg_ast_ctx_stk_instance_counter = 1;

@wksht template_identifier_replacer [
    [
        if(1)
            char[50] buf
            u64 ours = __INSTANCE_COUNTER;
            cgstrcpy(buf, __INSTANCE_STRING);
            __builtin_utoa(buf + cgstrlen(buf), ours);
            cgstrll* iter = result;
            while(iter != 0)
                if(iter.d != CG_TOK_IDENT) iter = iter.right continue end
                if(iter.text streq __REPLACEME_STRING)
                    __builtin_free(iter.text);
                    iter.text = __builtin_strdup(buf);
                end
                iter = iter.right
            end
        end
    ]
    [
        __REPLACEME_STRING  __INSTANCE_STRING __INSTANCE_COUNTER
    ]
]


@mktemplate [
    cg_ast_ctx_stk
    [
        [__NAME_2_GEN__]
        @globalscope
            //name_gen is the context struct itself.
            struct __NAME_GEN__
                noexport
                __BODY__
            end
            
            //name_2_gen is the context stack
            class __NAME_2_GEN__
                noexport
                //NOT POINTER!
                @cgvec[__NAME_GEN__] s
            end
            
            method codegen __NAME_2_GEN__.ctor():
                this.s.ctor();
            end
            
            method codegen __NAME_2_GEN__.dtor():
                this.s.dtor();
            end
            
            method codegen __NAME_2_GEN__.push():
                __NAME_GEN__ qq
                //clear memory of qq
                u64 i
                for(i = 0; i < sizeof(__NAME_GEN__); i++)
                    ((byte*)qq)[i] = 0;
                end
                //push it
                this.s.push(qq);
            end
            
            method codegen __NAME_2_GEN__.pop():
                this.s.pop();
            end
            
            method codegen __NAME_2_GEN__.top()->__NAME_GEN__*:
                if(this.s.len == 0) return cast(__NAME_GEN__*)0; end
                return this.s.d[this.s.len-1];
            end
            @cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_ [__NAME_GEN__] [__NAME_2_GEN__]
            //#__CBAS_TERMINATE
        end
    ][
        __BODY__
    ][
        cg_ast_ctx_stk_instance_counter++;
        @template_identifier_replacer "__NAME_GEN__" "__cg_ast_ctx_stk_struct_" cg_ast_ctx_stk_instance_counter
        @template_identifier_replacer "__NAME_2_GEN__" "__cg_ast_ctx_stk_stk_" cg_ast_ctx_stk_instance_counter
        return result;
    ]
]


@wksht cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_type_regurgitating_code [
    [
        if(1)
            //generate type
            if(t.basetype == CG_BASE_U8)
                @cg_bldr_pushqtok "u8"
            elif(t.basetype == CG_BASE_I8)
                @cg_bldr_pushqtok "i8"
            elif(t.basetype == CG_BASE_I16)
                @cg_bldr_pushqtok "i16"
            elif(t.basetype == CG_BASE_U16)
                @cg_bldr_pushqtok "u16"
            elif(t.basetype == CG_BASE_U32)
                @cg_bldr_pushqtok "u32"
            elif(t.basetype == CG_BASE_I32)
                @cg_bldr_pushqtok "i32"
            elif(t.basetype == CG_BASE_U64)
                @cg_bldr_pushqtok "u64"
            elif(t.basetype == CG_BASE_I64)
                @cg_bldr_pushqtok "i64"
            elif(t.basetype == CG_BASE_F32)
                @cg_bldr_pushqtok "f32"
            elif(t.basetype == CG_BASE_F64)
                @cg_bldr_pushqtok "f64"
            elif(t.basetype == CG_BASE_STRUCT)
                @cg_bldr_pushqtok [cbas_ast.type_table[0][t.structid].name]
            else
                @pprint[
                    /   "ERROR! cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_"
                    /   "has had an INTERNAL ERROR!"
                    /   "Huh? What basetype is this?"
                    /int(t.basetype)
                ]
            end
            u64 j
            for(j = 0; j < t.pointerlevel; j++)
                @cg_bldr_pushqtok "*"
            end
        end
    ][]
]

@mkbldrn cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_ 2 [
    //TODO- after the structs have been defined, 
    cgstrll* struct1 = 0; //NAME_GEN struct
    cgstrll* struct2 = 0; //NAME_2_GEN struct
    cgtypedecl* struct1_type = 0;
    cgtypedecl* struct2_type = 0;
    u64 i

    @initqtok ";";
    @dupell_inlist
    @foldout_arg struct1 inlist_dupe
    @foldout_arg struct2 inlist_dupe
    
    cgast* cbas_ast = cg_getast();
    if(struct1.d != CG_TOK_IDENT)
        @pprint[
            /   "ERROR! cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_: struct1 is not ident???"
        ]
        __builtin_exit(1);
    end
    if(struct2.d != CG_TOK_IDENT)
        @pprint[
            /   "ERROR! cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_: struct2 is not ident???"
        ]
        __builtin_exit(1);
    end
    
    //find our types...
    if(1)
        for(i = 0; i < cbas_ast.ntypedecls[0]; i++)
            if(struct1.text streq cbas_ast.type_table[0][i].name)
                struct1_type = cbas_ast.type_table[0][i];
                break
            end
        end
        for(i = 0; i < cbas_ast.ntypedecls[0]; i++)
            if(struct2.text streq cbas_ast.type_table[0][i].name)
                struct2_type = cbas_ast.type_table[0][i];
                break
            end
        end
    end
    if(struct1_type == 0 || struct2_type == 0)
        @pprint[
            /   "ERROR! cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_"
            /   "was unable to find one of the two structs passed in!"
        ]
        __builtin_exit(1);
    end
    
    //verify that the context struct contains only pointers...
    if(1)
        for(i = 0; i < struct1_type.nmembers; i++)
            cgtype* t = struct1_type.members[i];
            if(t.arraylen > 0 || t.pointerlevel < 1)
                @pprint[
                    /   "cg_ast_ctx_stk Error! non-pointer type in context struct:"
                    /   (struct1.text)
                    /   "Remove this member or change its type:"
                    /   (t.membername)
                ]
                __builtin_exit(1);
            end
        end
    end
    //TODO: write methods...
    //verify that the context struct contains only pointers...
    if(1)
        for(i = 0; i < struct1_type.nmembers; i++)
            cgtype* t = struct1_type.members[i];
            cgstr z2
            
            //get method- search the stack for a non-null pointer
            z2.fromstr("get_");
            z2.addstr(t.membername);
            @pushqtok "method"
            @pushqtok "codegen"
            @pushqtok [struct2.text]
            @pushqtok ":"
            @pushqtok [z2.s]          z2:free();
            @pushqtok "("
            @pushqtok ")"
            @pushqtok "->"
            @cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_type_regurgitating_code;
            @pushqtok ":"
                //TODO: search the stack for entries...
                @tokmanip_push_strings[
                    i64 i
                    for(i = (i64)this.s.len-1; i >= 0; i--)
                        if(this.s.d[i].$[@pushqtok [t.membername]] == 0)
                            continue
                        end
                        //not null, return it...
                        return this.s.d[i].$[@pushqtok [t.membername]];
                    end
                    return cast(
                        $[@cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_type_regurgitating_code;]
                    )0;
                ]
            
            @pushqtok "end"
            
            //set method- set the field in the topmost context in the stack.
            z2.fromstr("set_");
            z2.addstr(t.membername);
            
            @pushqtok "method"
            @pushqtok "codegen"
            @pushqtok [struct2.text]
            @pushqtok ":"
            @pushqtok [z2.s]          z2:free();
            @pushqtok "("
            @cg_ast_ctx_stk_generate_methods_for_NAME_GEN_structs_type_regurgitating_code;
            @pushqtok "bruh"
            @pushqtok ")"
            @pushqtok ":"
                //TODO: search the stack for entries...
                @tokmanip_push_strings[
                    //nothing on the stack? Can't do shit!
                    if(this.s.len == 0) return end;
                    //Set the field on the top stack element.
                    this.s.d[this.s.len-1].$[@pushqtok [t.membername]] = bruh
                ]
            
            @pushqtok "end"
            
            //we need set_MEMBERNAME (for configuring the top of the stack)
            //get_MEMBERNAME,
            //set_MEMBERNAME,
        end
    end
    
    return retval.right;
]



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//TREE DESIGNER
//
//lay out all the node types for a tree with ease!
//useful for writing ASTs!
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

struct cg_tree_node_types_struct_def
noexport
    cgstrll* name
    cgstrll* content
end

/*
    Tree designer...
    
    @treenodes[
        mynode1[
            bla bla
        ]
        mynode2[
            bla bla
        ]
    ]
*/
@cgrdparser[
    cg_tree_types
    [
        @cgvec[cg_tree_node_types_struct_def] tree_structs
    ]
    head[
        this.tree_structs.ctor();
        while(1)
            finish_on_tok_null
            ident[
                    do parse_node
            else
                    @pprint[
                        /   "cg_tree_node_types SYNTAX ERROR"
                        /   "Expected Identifier, got this instead:"
                    ]
                    tok.debug_print();
                    @pprint[
                        /   "File:"
                        /   (tok.filename)
                        /   "Line:"
                        /int(tok.linenum)
                        /   "Col:"
                        /int(tok.colnum)
                    ]
                    __builtin_exit(1);
            ]
            
        end
    ]
    parse_node[
        cg_tree_node_types_struct_def dd
        dd.name = 0;
        dd.content = 0;
        //grab the thing immediately right of the name- the contents of the struct in brackets
        @cg_bldr_foldout_arg [dd.content] [tok.right]
        dd.name = tok.dupe();
        eat //this eats the name...
        
        this.tree_structs.push(dd);
        finish
    ]
    finish[
        i64 i
        i64 len = this.tree_structs.len;
        emitq ";"
        if(len <= 0)
            finish
        end
        //there is at least one struct declared!
        for(i = 0; i < len; i++)
            emitq "@"
            emitq "global"
            emitq "struct"
            emit [this.tree_structs.d[i].name]
            emitq "noexport"
        end
        //emit contents of structs...
        for(i = len-1; i >= 0; i--)
            emit [this.tree_structs.d[i].content]
            emit_skip
            emitq "end"
        end
    ]
]


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*
    AST DESIGNER
*/
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



/*
    PLAN- THE AST DESIGNER
    
    Create a set of structs, possibly with circular dependency graphs (i.e. A->B->A) that
    represents your language, then write functions and methods that act on AST nodes.
    
    HOW DO I REPRESENT CIRCULAR DEPENDENCIES FOR STRUCTS IN MY LANGUAGE?
    
    1. all references to other nodes are turned into byte*. We can then turn all .member accesses
    into (  :member_reader()[0]). This is not completely bulletproof, though, and honestly it seems
    like it creates more problems than it solves...
    
    2. Define structs while you're defining structs. This is all compiletime CBAS, which means
    we don't need to go through the toc translator... so we *could* create circular dependencies
    as long as we only have pointer members. Not a big deal, right?
    
    3. We could constrict AST interaction within our AST manipulation code so that all AST interactions
    can easily be parsed, and then trick 1 can be applied. This is my best idea. Fundamentally, all
    AST interactions are inevitably member reads or writes (member access)... so... what's wrong?
    
    @cg_astdsgn_access_member [parent_expr] name
    
    which will turn into
    
    ((parent_expr):__name__()[0])
    
    This is a "low level interface" upon which I will design later implementations... it solves a problem
    that higher level tools need solved in order to function.
    
    HOW DO I GENERATE AST MANIPULATION CODE?
    
    Well, I figure much like cgrdparser, it's basically just CBAS with some macros, minor new language constructs, and syntax sugars.
    
    These manipulation functions are then written as members of the nodes.
    
    Setters and getters need to be written for every single one of a node's members, including
    vector member accesses.
    
    Code to manipulate AST nodes should be written in a DSL specifically designed for manipulating
    AST nodes. It should generally be CBAS, but with special statements for manipulating AST
    state (this makes writing the DSL easier).
    
    
    
    FORMAT
    
    @cg_astdesigner[
        myAST
        [
            myNode1* a
            myNode2* b
            @vec[myNode3*] c
        ]
        myNode1[
            int x
            char* y
        ]
        myNode2[
            myNode1* zz
        ]
        myNode3[
            @vec[myAST*] zzz
        ]
        method myNode3.visit()->myNode3* [
            //put code here...
        ]
    ]
    
*/


/*

struct cg_astdesigner_fn_def
    noexport
    cgstr name
    cgstrll* code_in
    cgstrll* code_out
end

struct cg_astdesigner_struct_def
    noexport
    cgstr name;
    cgstrll* contents_in //before name mangling
    cgstrll* contents_out //after name mangling
    @cgvec[cg_astdesigner_fn_def*] func_defs;
end


struct cg_astdesigner_ast
    noexport
    cgstr name;
    @cgvec[cg_astdesigner_struct_def*] node_defs;
    @cgvec[cg_astdesigner_fn_def*] func_defs;
    //TODO: more fns?
end


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// METHODS
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method codegen cg_astdesigner_struct_def.ctor():
    this.name.s = 0;
    this.func_defs.ctor();
end

method codegen cg_astdesigner_struct_def.dtor():
    this.name:free();
    this.func_defs.dtor();
end

method codegen cg_astdesigner_fn_def.ctor():
    this.name.s = 0;
    this.code_in = cast(cgstrll*)0;
    this.code_out = cast(cgstrll*)0;
end
method codegen cg_astdesigner_fn_def.dtor():
    this.name.free();
end



method codegen cg_astdesigner_ast.ctor():
    this.name.s = 0;
    this.node_defs.ctor();
    this.func_defs.ctor();
end

method codegen cg_astdesigner_ast.dtor():
    this.name:free();
    this.node_defs.dtor();
    this.func_defs.dtor();
end



@cgrdparser[
    cg_ast_designer
    [
        cg_astdesigner_ast ast_spec
    ]
    head[
        this.ast_spec.ctor();
        
        
        do parse_node_defs
        do parse_node_methods
        finish
    ]
    parse_node_defs[
        if(tok_not_null)
            ident[
                
                else
                    finish
            ]
        end
    ]
    parse_node_def[
    
    ]
    parse_node_methods[
        
    ]
    parse_node_method[
        
    ]
    finish[
        //TODO
        emitq ";"
        finish
    ]
]
*/



