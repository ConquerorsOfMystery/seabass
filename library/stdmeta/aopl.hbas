


#guard ABSTRACT_OBJECT_PROGRAMMING_LANGUAGE_DMHSW

/*
    THE ABSTRACT OBJECT PROGRAMMING LANGUAGE
    
    Objects + relationships
*/


#include <stdmeta/tbas.hbas>

class cg_aopl_ext_fact
    noexport
    u64 classification
        //0 - unclassified
        //1 - integer
        //2 - double
    i64 i
    f64 d
end


codegen u64 cg_aopl_user_classification_counter = 128;
codegen @cgvec[char*] cg_aopl_global_user_type_directory;


//The abstract object!
class cg_aopl_object
    noexport
    char* name
    char* type //type specified by string.
               //note that we can only have one type!
               //compound types are their own types!
    u64 classification
    //LOW LEVEL CLASSIFICATION- WHAT IS THIS?
    //0    - unclassified
    //1    - low level symbol
    //2    - low level typedecl
    //3    - fact
    
    //100+ - user defined
    byte* ext_ptr //see cg_aopl_ext
    u64 has_ctx   //does it have a context?
    byte* ctx_ptr //see cg_aopl_ctx,
                  //an object may have its own personal context,
                  //to which it is owner.
    byte* ctx_parent //contextual parent- if this is null, we consider this cg_aopl_object
    //to be global! This points to a cg_aopl_ctx!
end

codegen u64 CG_AOPL_EXPR_NODE_MAX_ARGS = 64;
codegen u64 cg_aopl_user_op_counter = 128;

class cg_aopl_exprnode
    noexport
    u64 opcode //What is the nature of this expr_node?
    char* type //user-created or internal type.
    @cgvec[cg_aopl_exprnode*] subnodes
    char* ref_symname
    cg_aopl_object* aobj //an expr_node could own an abstract object...
end

class cg_aopl_ctx
    noexport
    cg_aopl_object* owner
    @cgvec[cg_aopl_exprnode*]   insns
    @cgvec[cg_aopl_object*]     objects
end

class cg_aopl_ext
    noexport
    union
    cgsymdecl                   ll_sym
    cgtypedecl                  ll_tdecl
    cgscope                     ll_ins_seq
    cg_aopl_ext_fact            fact
    byte* user_ext
end

//OBJECT
method codegen cg_aopl_object.ctor:
    this.name = 0;
    this.type = 0;
    this.classification = 0;
    this.has_ctx = 0;
    this.ctx_parent = 0;
end
method codegen cg_aopl_object.dtor:
    
end

//EXPRNODE
method codegen cg_aopl_exprnode.ctor:
    this.opcode = 0;
    this.type = 0;
    this.ref_symname = 0;
    this.subnodes.ctor();
end
method codegen cg_aopl_exprnode.dtor:
    this.subnodes.dtor();
end

//CTX
method codegen cg_aopl_ctx.ctor:
    this.insns.ctor();
    this.objects.ctor();
end
method codegen cg_aopl_ctx.dtor:
    this.insns.dtor();
    this.objects.dtor();
end


//ext cannot be initialized or destroyed as it is a union of types...

