
#guard templated_cbas_library_DMHSW

/*
    Templated code for seabass. Like a worksheet, but with two portions:
    a definition portion and a repeated portion.
    
    Generic types? Generic functions? Generic control flow?
    Generic generics?
    
    Can you imagine what it would mean to template it? We can
    serve it!
    
    Leftover development/planning commentary:
    
    THE IDEA
    
    Following the "End-of-October Revolution" it is now
    possible to define global symbols during parsing in
    Seabass. This allows me to write structs, methods,
    functions, and even global variables while a function
    is being parsed.
    
    I will use this to implement a custom kind of
    worksheet called the "Two-Part-Worksheet". Basically,
    the worksheet will take in a series of inputs, and
    based on the inputs, generate two separate pieces
    of code.
    
    The first piece of code is expanded only the first
    time the worksheet is invoked with a particular set
    of arguments. This would, for instance, implement
    a templated data structure.
    
    The second piece of code is inserted in-place of the invocation.
    
    HOW WILL IT WORK, IN DETAIL?
    
    1. You write a function that emits a token
    stream beginning with a bracked portion followed by another
    set of tokens. The portion inside brackets will be the
    "every single time" portion and the rest will be the
    "only once" code.
    
    2. You ask Tbas to make it into a template, providing the
    number of arguments it receives (0 to n bracketed token lists) 
    and giving it a new name.
    
    3. Tbas will handle the process of instantiating the template
    only once giving a token list of arguments.
*/

#include <stdmeta/tok_manip.hbas>

fn codegen cg_tbas_prototype_template_fn(cgstrll* in)->cgstrll*: return cast(cgstrll*)0 end

class cg_tbas_template_instance noexport
    cgstrll* arglist
    cgstrll* prefix //once
    cgstrll* body //every time
end

class cg_tbas_template noexport
    char* name
    byte* funky
    u64 nargs
    u64 ninstances
    cg_tbas_template_instance* instances
end

codegen cg_tbas_template** cg_tbas_all_templates = 0;
codegen u64 cg_tbas_ntemplates = 0;

fn codegen cg_tbas_rectify_types(cgstrll* inlist):
    for(0,inlist != 0, inlist = inlist.right)
        if(inlist.d != CG_TOK_KEYWORD) continue end
        //this is a keyword...
        if(
            inlist.text streq "byte" ||
            inlist.text streq "ubyte" ||
            inlist.text streq "char" ||
            inlist.text streq "uchar"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("u8");
        elif(
            inlist.text streq "sbyte" ||
            inlist.text streq "schar"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("i8");
        elif(
            inlist.text streq "ushort"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("u16");
        elif(
            inlist.text streq "short" ||
            inlist.text streq "sshort"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("i16");
        elif(
            inlist.text streq "uint" ||
            inlist.text streq "ulong"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("u32");
        elif(
            inlist.text streq "int" ||
            inlist.text streq "sint" ||
            inlist.text streq "slong" ||
            inlist.text streq "long"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("i32");
        elif(
            inlist.text streq "ullong" ||
            inlist.text streq "qword" ||
            inlist.text streq "uqword" ||
            inlist.text streq "uptr"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("u64");
        elif(
            inlist.text streq "llong" ||
            inlist.text streq "sqword" ||
            inlist.text streq "sllong"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("i64");
        elif(
            inlist.text streq "float"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("f32");
        elif(
            inlist.text streq "double"
        )
            __builtin_free(inlist.text);
            inlist.text = __builtin_strdup("f64");

        end
    end
end


fn codegen cg_tbas_push_template():
    cg_tbas_all_templates = (cg_tbas_template**)__builtin_realloc(
        (u8*)cg_tbas_all_templates,
        (++cg_tbas_ntemplates) * sizeof(u8*)
    );
    cg_tbas_all_templates[cg_tbas_ntemplates-1] = (cg_tbas_template*)__builtin_malloc(
        sizeof(cg_tbas_template)
    );
    
    cg_tbas_all_templates[cg_tbas_ntemplates-1].name = 0;
    cg_tbas_all_templates[cg_tbas_ntemplates-1].funky = 0;
    cg_tbas_all_templates[cg_tbas_ntemplates-1].nargs = 0;
    cg_tbas_all_templates[cg_tbas_ntemplates-1].instances = 0;
    cg_tbas_all_templates[cg_tbas_ntemplates-1].ninstances = 0;
end

method codegen cgstrll.equ(cgstrll* o)->u64:
    //Not the same classification? FAIL!
    if(this.d != o.d) return 0 end
    //same classification and both have no text? They're the same!
    if(this.text == 0 && o.text == 0) return 1 end
    //one had text but the other didn't? Fail it!
    if(this.text == 0 || o.text == 0) return 0 end
    //They both have text and the same classification. Compare the text.
    return this.text streq o.text
end

//Of note: this must return true if both are null.
method codegen cgstrll.eqll(cgstrll* o)->u64:
    while(1)
        if(this == 0 || o == 0)
            if(this != o) //one ended prematurely...
                return 0 
            else
                //success!
                return 1
            end
        end
        if(!this.equ(o))
            return 0
        end
        this = this.right;
        o = o.right;
    end
end

//for a given template, search to see if any instances match the argument list...
method codegen cg_tbas_template.find_instance_with_arg(cgstrll* arglist)->i64:
    i64 i = 0;
    i64 ninstances = this.ninstances;
    for(i = 0; i < ninstances; i++)
        if((this.instances[i]).arglist.eqll(arglist))
            return i
        end
    end
    return -1
end

method codegen cg_tbas_template.push_empty_instance():
    this.instances = (cg_tbas_template_instance*)__builtin_realloc(cast(u8*)this.instances, sizeof(cg_tbas_template_instance) * ++this.ninstances);
    (this.instances[this.ninstances-1]).arglist = 0;
    (this.instances[this.ninstances-1]).prefix = 0;
    (this.instances[this.ninstances-1]).body = 0;
end

//Provided an argument list, force the generation of the prefix and body portions...
method codegen cg_tbas_template.gen_instance(cgstrll* arglist)->i64:
    i64 retval = this.ninstances;
    this.push_empty_instance();
    cg_tbas_template_instance* qq = this.instances[retval];
    //Function is assumed to not consume or modify the arglist...
    cgstrll* gen = callfnptr[cg_tbas_prototype_template_fn](this.funky)(arglist);
    cgstrll* body;
    if(gen == 0)
        @pprint[
            /bar
            /       "TBAS INTERNAL ERROR: cg_tbas_template.gen_instance"
            /bar
            /       "Template returned nothing..."
            /       "Template's name was:"
            /       (this.name)
        ]
        __builtin_exit(1);
    end
    if(gen.d != CG_TOK_OBRACK)
        @pprint[
            /bar
            /       "TBAS INTERNAL ERROR: cg_tbas_template.gen_instance"
            /bar
            /       "Template returned without an inner bracketed portion..."
            /       "Template's name was:"
            /       (this.name)
        ]
        __builtin_exit(1);
    end
    @cg_bldr_foldout_arg body gen
    //gen is the prefix...
    qq.arglist = arglist;
    qq.body = body;
    qq.prefix = gen;
    return retval;
end

//Given an argument list, see if such an instance exists, and if it doesn't, then instantiate it.
//Also return whether or not it had to be created...
method codegen cg_tbas_template.get_instance(cgstrll* in, u64* did_create)->cg_tbas_template_instance*:
    i64 qq
    qq = this.find_instance_with_arg(in);
    if(qq != -1) did_create[0] = 0;return this.instances + qq end
    //The instance does not exist...
    did_create[0] = 1;
    qq = this.gen_instance(in:dupell());
    return this.instances + qq
end

//Define a template. Inner...

@mkbldrn cg_tbas_inner_mktemplate 4 [
    /*
        our arguments are like this:
        @cg_tbas_inner_mktemplate IDENT IDENT INTEGER INTEGER
    */
    @dupell_inlist
    cgstrll* fakename
    cgstrll* realname
    cgstrll* the_number
    cgstrll* the_number2
    u64 nargs
    u64 typed = 0;
    cgsymdecl* the_function_pointer
    
    @foldout_arg fakename inlist_dupe
    @foldout_arg realname inlist_dupe
    @foldout_arg the_number inlist_dupe
    @foldout_arg the_number2 inlist_dupe
    
    if(fakename == 0 || fakename.d != CG_TOK_IDENT)
        @pprint[
            /       "TBAS ERROR"
            /       "Dest name is INVALID!!!!!"
            /       "Usage:"
            /       "@cg_tbas_inner_mktemplate destname src_fn nargs typed"
            /       "@cg_tbas_inner_mktemplate IDENT IDENT INT_CONST INT_CONST"
        ]
        __builtin_exit(1);
    end
    
    if(realname == 0 || realname.d != CG_TOK_IDENT)
        @pprint[
            /       "TBAS ERROR"
            /       "Src name is INVALID!!!!!"
            /       "Usage:"
            /       "@cg_tbas_inner_mktemplate destname src_fn nargs typed"
            /       "@cg_tbas_inner_mktemplate IDENT IDENT INT_CONST INT_CONST"
        ]
        __builtin_exit(1);
    end
 
    if(the_number == 0 || the_number.d != CG_TOK_INT_CONST)
        @pprint[
            /       "TBAS ERROR"
            /       "Intlit is INVALID!!!!!"
            /       "Usage:"
            /       "@cg_tbas_inner_mktemplate destname src_fn nargs typed"
            /       "@cg_tbas_inner_mktemplate IDENT IDENT INT_CONST INT_CONST"
        ]
        __builtin_exit(1);
    end
    if(the_number2 == 0 || the_number2.d != CG_TOK_INT_CONST)
        @pprint[
            /       "TBAS ERROR"
            /       "Intlit is INVALID!!!!!"
            /       "Usage:"
            /       "@cg_tbas_inner_mktemplate destname src_fn nargs typed"
            /       "@cg_tbas_inner_mktemplate IDENT IDENT INT_CONST INT_CONST"
        ]
        __builtin_exit(1);
    end
    nargs = __builtin_atou(the_number.text);
    typed = __builtin_atou(the_number2.text);
    the_number2:freelist();
    the_function_pointer = (cgsymdecl*)__builtin_retrieve_sym_ptr(realname.text);
    realname:freelist();
    if(the_function_pointer == 0)
        @pprint[
            /       "TBAS ERROR"
            /       "Could not find this function:"
            /       (realname.text)
            /       "Usage:"
            /       "@cg_tbas_inner_mktemplate destname src_fn nargs typed"
            /       "@cg_tbas_inner_mktemplate IDENT IDENT INT_CONST INT_CONST"
        ]
        __builtin_exit(1)
    end
    if(
        the_function_pointer.is_codegen == 0 ||
        the_function_pointer.t.is_function == 0 ||
        the_function_pointer.t.basetype != CG_BASE_STRUCT ||
        the_function_pointer.t.pointerlevel != 1 ||
        the_function_pointer.nargs != 1 ||
        the_function_pointer.fargs[0].basetype != CG_BASE_STRUCT ||
        the_function_pointer.fargs[0].pointerlevel != 1
    )
        @pprint[
            /       "TBAS ERROR"
            /       "This symbol is not a codegen function with the correct prototype:"
            /       (realname.text)
            /       "The correct prototype is:"
            /       "fn codegen my_hook(cgstrll* in)->cgstrll*;"
        ]
        __builtin_exit(1)
    end

    //push the new template...
    cg_tbas_push_template();
    cg_tbas_template* qq = cg_tbas_all_templates[cg_tbas_ntemplates-1];
    
    qq.name = fakename.text;
    fakename.text = 0;
    fakename:freelist();

    qq.funky = (u8*)the_function_pointer;
    qq.nargs = nargs;
    
    
    
    /*
        Create the "realname" template invoker.
        
        This has to 
    */
    @initqtok "@"
    @pushqtok "mkbldrn"
    @pushqtok [qq.name]
    @pushqtok [the_number.text]
    the_number:freelist();
    @pushqtok "["
    /*
        1. make variables...
    */
    @pushqtok "u64"
    @pushqtok "our_templateid"
    @pushqtok "="
    if(1)
        char[50] buf
        __builtin_utoa(buf, cg_tbas_ntemplates-1);
        @pushqtok [buf]
    end
    @pushqtok ";"

    /*
        Based on the arguments passed to the builder, we call get_instance
    */
    if(typed == 0)
        @tokmanip_push_strings[
            cg_tbas_template* us = cg_tbas_all_templates[our_templateid];
            u64[1] did_create;
            cg_tbas_template_instance* hh = us.get_instance(inlist, did_create);
            cgstrll* retval
            
            if(did_create[0])
                retval = hh.prefix:dupell();
                retval:push_end(hh.body:dupell());
                return retval;
            end
            
            retval = (hh.body:dupell());
            return retval;
        ]
    else
        @tokmanip_push_strings[
            //we must first rectify types....
            cg_tbas_rectify_types(inlist);
            cg_tbas_template* us = cg_tbas_all_templates[our_templateid];
            u64[1] did_create;
            cg_tbas_template_instance* hh = us.get_instance(inlist, did_create);
            cgstrll* retval
            
            if(did_create[0])
                retval = hh.prefix:dupell();
                retval:push_end(hh.body:dupell());
                return retval;
            end
            
            retval = (hh.body:dupell());
            return retval;
        ]
    end
    
    @pushqtok "]"
    return retval;
]

/*
    USAGE
    
    @cgmktemplate [
        [
            //template contents
        ][
            //args
        ][
        
        ]
    ]
*/

@mkbldr [
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        mktemplate 
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /*
        First argument must be an identifier.
    */
    @dupell_inlist
    cgstrll* name;
    cgstrll* first_portion
    cgstrll* second_portion
    cgstrll* third_portion = 0;
    u64 nargs = 0;
    u64 is_typed = 0;
    if(
        inlist_dupe == 0 || 
        inlist_dupe.d != CG_TOK_IDENT
    )
        @pprint[
            /           "MKTEMPLATE ERROR"
            /           "Template lacks identifier (NAME)"
        ]
        goto explain_syntax
    end
    @foldout_arg name inlist_dupe
    
    //check for the "typed" arg...
    if(inlist_dupe != 0 &&
        inlist_dupe.d == CG_TOK_IDENT &&
        inlist_dupe.text streq "typed"
    )
        is_typed = 1;
        cgstrll* r = inlist_dupe.right;
        __builtin_free(inlist_dupe.text);
        __builtin_free((u8*)inlist_dupe);
        inlist_dupe = r;
    end
    
    if(
        inlist_dupe == 0 || 
        inlist_dupe.d != CG_TOK_OBRACK
    )
        @pprint[
            /           "MKTEMPLATE ERROR"
            /           "Template lacks opening square bracket at beginning!"
            /           "meaning it has no properly-formed template portion!"
        ]
        goto explain_syntax
    end
    
    @foldout_arg first_portion inlist_dupe //NOTE: it can be empty, so it could be null...
    
    if(
        inlist_dupe == 0 || 
        inlist_dupe.d != CG_TOK_OBRACK
    )
        @pprint[
            /           "MKTEMPLATE ERROR"
            /           "Template lacks opening square bracket for arglist!"
            /           "meaning it has no properly-formed arglist portion!"
        ]
        goto explain_syntax
    end
    @foldout_arg second_portion inlist_dupe //NOTE: This can also be empty, so it could also be null...
    
    if(inlist_dupe != 0)
        if(inlist_dupe.d != CG_TOK_OBRACK)
            @pprint[
                /           "MKTEMPLATE ERROR"
                /           "The code portion (optional) has something other than an opening square bracket!"
                /           "meaning it is not properly formed!"
            ]
            goto explain_syntax
        end
        @foldout_arg third_portion inlist_dupe //NOTE: This can also be empty, so it could also be null...
    end
    if(inlist_dupe != 0)
        @pprint[
            /       "MKTEMPLATE ERROR"
            /       "There's something here AFTER the code portion! That's not allowed!"
        ]
        goto explain_syntax
    end
    /*
        We have to do some analysis...
    */
    
    
    char* mutated_innername
    if(1)
        cgstrll* ww
        cgstr q
        cgstr q2
        q:fromstr("tbas_interior_function_");
        q2.s = name.text;
        q:add(q2);
        mutated_innername = q.s;
        ww = second_portion;
        while(ww != 0)
            ww = ww.right;
            nargs++;
        end
    end
    /*
        Create a worksheet function with the mutated inner name....
    */
    @initqtok "@"
    @pushqtok "wksht_fn"
    @pushqtok [mutated_innername]
    @pushqtok "["
        @pushqtok "["
        if(first_portion != 0)
            @pushtok  [first_portion] //MOVE
            @rwalk_skip ;
        end
        @pushqtok "]"
        //arglist
        @pushqtok "["
        if(second_portion != 0)
            @pushtok  [second_portion] //MOVE
            @rwalk_skip ;
        end
        @pushqtok "]"
        //third portion...
        if(third_portion != 0)
            @pushqtok "["
            @pushtok [third_portion] //MOVE
            @rwalk_skip ;
            @pushqtok "]"
        end
    @pushqtok "]"
    //use the previously created mkbldrn to create the template...
    @pushqtok "@"
    @pushqtok "cg_tbas_inner_mktemplate"
    @pushtok [name] //MOVE
    @rwalk_skip ;
    @pushqtok [mutated_innername]
    __builtin_free(mutated_innername);
    if(1)
        char[50] buf
        __builtin_utoa(buf, nargs);
        @pushqtok [buf]
        __builtin_utoa(buf, is_typed);
        @pushqtok [buf]
    end
    
    
    return retval;
    :explain_syntax
    @pprint[
        /           "Syntax is..."
        /           "@mktemplate["
        /           "myTemplate"
        /           "    [//template"
        /           "        [/*body. This is inserted each time.*/]"
        /           "        //prefix code. This is generated only once."
        /           "    ]"
        /           "    [//Argument list. All identifiers."
        /           "        ARG1 ARG2 ARG3 //..."
        /           "    ]"
        /           "//this portion (the code portion) is optional..."
        /           "    ["
        /           "        return result;"
        /           "    ]"            
        /           "]"
    ]
    __builtin_exit(1)
]

codegen u64 TEMPLATE_DUMMY_EXPANDER_COUNTER = 0;

//Pretemplating! Useful when you need to have templated structs within templated structs.
@wksht pretemplate [
    [
        ;
        PRE_EXPANSION TEMPLATE_DUMMY_EXPANDER;
    ][
        PRE_EXPANSION
    ][
        char[50] buf
        u64 ours = TEMPLATE_DUMMY_EXPANDER_COUNTER++;
        cgstrcpy(buf, "__tplimpl__");
        __builtin_utoa(buf + 11, ours);
        
        cgstrll* iter = result;
        while(iter != 0)
            if(iter.d != CG_TOK_IDENT) iter = iter.right continue end
            if(iter.text streq "TEMPLATE_DUMMY_EXPANDER")
                __builtin_free(iter.text);
                iter.text = __builtin_strdup(buf);
            end
            iter = iter.right
        end
        return result;
    ]
]

